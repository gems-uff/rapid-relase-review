% Encoding: UTF-8

@Article{Khomh2015,
  author    = {Khomh, Foutse and Adams, Bram and Dhaliwal, Tejinder and Zou, Ying},
  journal   = {Empirical Software Engineering},
  title     = {Understanding the Impact of Rapid Releases on Software Quality},
  year      = {2015},
  issn      = {1573-7616},
  month     = apr,
  number    = {2},
  pages     = {336--373},
  volume    = {20},
  abstract  = {Many software companies are shifting from the traditional multi-month release cycle to shorter release cycles. For example, Google Chrome and Mozilla Firefox release new versions every 6 weeks. These shorter release cycles reduce the users' waiting time for a new release and offer better feedback and marketing opportunities to companies, but it is unclear if the quality of the software product improves as well, since developers and testers are under more pressure. In this paper, we extend our previous empirical study of Mozilla Firefox on the impact of rapid releases on quality assurance with feedback by Mozilla project members. The study compares crash rates, median uptime, and the proportion of pre- and post-release bugs in traditional releases with those in rapid releases, and we also analyze the source code changes made by developers to identify potential changes in the development process. We found that (1) with shorter release cycles, users do not experience significantly more pre- or post-release bugs (percentage-wise) and (2) bugs are fixed faster, yet (3) users experience these bugs earlier during software execution (the program crashes earlier). Increased integration activity and propagation of harder bugs to later versions account for some of these findings. Overall, our case study suggests that a clear release engineering process with thorough automation is one of the major challenges when switching to rapid releases.},
  doi       = {10.1007/s10664-014-9308-x},
  file      = {Springer Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\SNAK3FIA\\Khomh et al. - 2015 - Understanding the impact of rapid releases on soft.pdf:application/pdf},
  groups    = {selected, phase_start},
  keywords  = {Bugs,Release cycle,Software quality,Software release,Testing},
  language  = {en},
  timestamp = {2019-06-30T03:23:08Z},
}

@InProceedings{Guzman2017,
  author     = {Guzm{\'a}n, Liliana and Oriol, Marc and Rodr{\'i}guez, Pilar and Franch, Xavier and Jedlitschka, Andreas and Oivo, Markku},
  booktitle  = {Requirements {{Engineering}}: {{Foundation}} for {{Software Quality}}},
  title      = {How {{Can Quality Awareness Support Rapid Software Development}}? \textendash{} {{A Research Preview}}},
  year       = {2017},
  editor     = {Gr{\"u}nbacher, Paul and Perini, Anna},
  pages      = {167--173},
  publisher  = {{Springer International Publishing}},
  series     = {Lecture {{Notes}} in {{Computer Science}}},
  abstract   = {Context and Motivation: Rapid software development (RSD) refers to the organizational capability to develop, release, and learn from software in rapid cycles without compromising its quality. To achieve RSD, it is essential to understand and manage software quality along the software lifecycle. Question/Problem: Despite the numerous information sources related to product quality, there is a lack of mechanisms for supporting continuous quality management throughout the whole RSD process. Principal ideas/Results: We propose Q-Rapids, a data-driven, quality-aware RSD framework in which quality and functional requirements are managed together. Quality requirements are incrementally elicited and refined based on data gathered at both development time and runtime. Project, development, and runtime data is aggregated into quality-related indicators to support decision makers in steering future development cycles. Contributions: Q-Rapids aims to increase software quality through continuous data gathering and analysis, as well as continuous management of quality requirements.},
  groups     = {selected, phase_start},
  isbn       = {978-3-319-54045-0},
  keywords   = {Quality requirements,Rapid software development,Software quality},
  language   = {en},
  shorttitle = {How {{Can Quality Awareness Support Rapid Software Development}}?},
  timestamp  = {2019-06-29T22:40:39Z},
}

@InProceedings{Mantyla2013,
  author    = {M{\"a}ntyl{\"a}, M. V. and Khomh, F. and Adams, B. and Engstr{\"o}m, E. and Petersen, K.},
  booktitle = {2013 {{IEEE International Conference}} on {{Software Maintenance}}},
  title     = {On {{Rapid Releases}} and {{Software Testing}}},
  year      = {2013},
  month     = sep,
  pages     = {20--29},
  abstract  = {Large open and closed source organizations like Google, Facebook and Mozilla are migrating their products towards rapid releases. While this allows faster time-to-market and user feedback, it also implies less time for testing and bug fixing. Since initial research results indeed show that rapid releases fix proportionally less reported bugs than traditional releases, this paper investigates the changes in software testing effort after moving to rapid releases. We analyze the results of 312,502 execution runs of the 1,547 mostly manual system level test cases of Mozilla Fire fox from 2006 to 2012 (5 major traditional and 9 major rapid releases), and triangulated our findings with a Mozilla QA engineer. In rapid releases, testing has a narrower scope that enables deeper investigation of the features and regressions with the highest risk, while traditional releases run the whole test suite. Furthermore, rapid releases make it more difficult to build a large testing community, forcing Mozilla to increase contractor resources in order to sustain testing for rapid releases.},
  doi       = {10.1109/ICSM.2013.13},
  groups    = {selected, phase_start},
  keywords  = {agile releases,Browsers,bugs,builds,Computer bugs,Google,manual system-level test cases,Measurement,Mozilla,Mozilla Firefox,Mozilla QA engineer,opensource,program testing,rapid release models,release model,Software,software testing,Software testing},
  timestamp = {2019-06-17T22:40:27Z},
}

@InProceedings{Clark2014,
  author     = {Clark, Sandy and Collis, Michael and Blaze, Matt and Smith, Jonathan M.},
  booktitle  = {Proceedings of the 2014 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  title      = {Moving {{Targets}}: {{Security}} and {{Rapid}}-{{Release}} in {{Firefox}}},
  year       = {2014},
  address    = {{New York, NY, USA}},
  pages      = {1256--1266},
  publisher  = {{ACM}},
  series     = {{{CCS}} '14},
  abstract   = {Software engineering practices strongly affect the security of the code produced. The increasingly popular Rapid Release Cycle (RRC) development methodology and easy network software distribution have enabled rapid feature introduction. RRC's defining characteristic of frequent software revisions would seem to conflict with traditional software engineering wisdom regarding code maturity, reliability and reuse, as well as security. Our investigation of the consequences of rapid release comprises a quantitative, data-driven study of the impact of rapid-release methodology on the security of the Mozilla Firefox browser. We correlate reported vulnerabilities in multiple rapid release versions of Firefox code against those in corresponding extended release versions of the same system; using a common software base with different release cycles eliminates many causes other than RRC for the observables. Surprisingly, the resulting data show that Firefox RRC does not result in higher vulnerability rates and, further, that it is exactly the unfamiliar, newly released software (the "moving targets") that requires time to exploit. These provocative results suggest that a rethinking of the consequences of software engineering practices for security may be warranted.},
  doi        = {10.1145/2660267.2660320},
  file       = {ACM Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\KAVQVI4H\\Clark et al. - 2014 - Moving Targets Security and Rapid-Release in Fire.pdf:application/pdf},
  groups     = {selected, phase_start},
  isbn       = {978-1-4503-2957-6},
  keywords   = {agile programming,firefox,honeymoon effect:arms race,rapid release cycle,secure software development models,secure software metrics,security,software life-cycle,software qualitysecure software development,vulnerabilities,windows of vulnerability},
  shorttitle = {Moving {{Targets}}},
  timestamp  = {2019-06-26T01:27:26Z},
}

@Article{wu1997taiwan,
  author    = {Wu, Yih-Min and Shin, Tzay-Chyn and Chen, Chen-Chun and Tsai, Yi-Ben and Lee, William HK and Teng, Ta Liang},
  journal   = {Seismological Research Letters},
  title     = {Taiwan rapid earthquake information release system},
  year      = {1997},
  number    = {6},
  pages     = {931--943},
  volume    = {68},
  groups    = {excluded_title, phase_start},
  publisher = {Seismological Society of America},
}

@Article{Mantyla2015,
  author     = {M{\"a}ntyl{\"a}, Mika V. and Adams, Bram and Khomh, Foutse and Engstr{\"o}m, Emelie and Petersen, Kai},
  journal    = {Empirical Software Engineering},
  title      = {On Rapid Releases and Software Testing: A Case Study and a Semi-Systematic Literature Review},
  year       = {2015},
  issn       = {1573-7616},
  month      = oct,
  number     = {5},
  pages      = {1384--1425},
  volume     = {20},
  abstract   = {Large open and closed source organizations like Google, Facebook and Mozilla are migrating their products towards rapid releases. While this allows faster time-to-market and user feedback, it also implies less time for testing and bug fixing. Since initial research results indeed show that rapid releases fix proportionally less reported bugs than traditional releases, this paper investigates the changes in software testing effort after moving to rapid releases in the context of a case study on Mozilla Firefox, and performs a semi-systematic literature review. The case study analyzes the results of 312,502 execution runs of the 1,547 mostly manual system-level test cases of Mozilla Firefox from 2006 to 2012 (5 major traditional and 9 major rapid releases), and triangulates our findings with a Mozilla QA engineer. We find that rapid releases have a narrower test scope that enables a deeper investigation of the features and regressions with the highest risk. Furthermore, rapid releases make testing more continuous and have proportionally smaller spikes before the main release. However, rapid releases make it more difficult to build a large testing community , and they decrease test suite diversity and make testing more deadline oriented. In addition, our semi-systematic literature review presents the benefits, problems and enablers of rapid releases from 24 papers found using systematic search queries and a similar amount of papers found through other means. The literature review shows that rapid releases are a prevalent industrial practice that are utilized even in some highly critical domains of software engineering, and that rapid releases originated from several software development methodologies such as agile, open source, lean and internet-speed software development. However, empirical studies proving evidence of the claimed advantages and disadvantages of rapid releases are scarce.},
  doi        = {10.1007/s10664-014-9338-4},
  groups     = {selected, phase_start},
  keywords   = {Agile releases,Bugs,Builds,Mozilla,Open-source,Release model,Software testing},
  language   = {en},
  shorttitle = {On Rapid Releases and Software Testing},
  timestamp  = {2019-06-17T22:40:28Z},
}

@InProceedings{daCosta2016a,
  author     = {{da Costa}, Daniel Alencar and McIntosh, Shane and Kulesza, Uir{\'a} and Hassan, Ahmed E.},
  booktitle  = {Proceedings of the 13th {{International Conference}} on {{Mining Software Repositories}}},
  title      = {The Impact of Switching to a Rapid Release Cycle on the Integration Delay of Addressed Issues: An Empirical Study of the Mozilla Firefox Project},
  year       = {2016},
  address    = {{New York, NY, USA}},
  month      = may,
  pages      = {374--385},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{MSR}} '16},
  abstract   = {The release frequency of software projects has increased in recent years. Adopters of so-called rapid release cycles claim that they can deliver addressed issues (i.e., bugs, enhancements, and new features) to users more quickly. However, there is little empirical evidence to support these claims. In fact, in our prior work, we found that code integration phases may introduce delays in rapidly releasing software --- 98\% of addressed issues in the rapidly releasing Firefox project had their integration delayed by at least one release. To better understand the impact that rapid release cycles have on the integration delay of addressed issues, we perform a comparative study of traditional and rapid release cycles. Through an empirical study of 72,114 issue reports from the Firefox system, we observe that, surprisingly, addressed issues take a median of 50 days longer to be integrated in rapid Firefox releases than the traditional ones. To investigate the factors that are related to integration delay in traditional and rapid release cycles, we train regression models that explain if an addressed issue will have its integration delayed or not. Our explanatory models achieve good discrimination (ROC areas of 0.81-0.83) and calibration scores (Brier scores of 0.05-0.16). Deeper analysis of our explanatory models indicates that traditional releases prioritize the integration of backlog issues, while rapid releases prioritize issues that were addressed during the current release cycle. Our results suggest that rapid release cycles may not be a silver bullet for the rapid delivery of addressed issues to users.},
  doi        = {10.1145/2901739.2901764},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\R2XF9NSH\\da Costa et al. - 2016 - The impact of switching to a rapid release cycle o.pdf:application/pdf},
  groups     = {selected, phase_start},
  isbn       = {978-1-4503-4186-8},
  shorttitle = {The Impact of Switching to a Rapid Release Cycle on the Integration Delay of Addressed Issues},
  timestamp  = {2020-10-29T18:53:46Z},
}

@Article{arnoult2005release,
  author    = {Arnoult, Damien and Grodet, Alain and Lee, Yang-Ja and Estaquier, J{\'e}r{\^o}me and Blackstone, Craig},
  journal   = {Journal of Biological Chemistry},
  title     = {Release of OPA1 during apoptosis participates in the rapid and complete release of cytochrome c and subsequent mitochondrial fragmentation},
  year      = {2005},
  number    = {42},
  pages     = {35742--35750},
  volume    = {280},
  groups    = {phase_start, excluded_title},
  publisher = {ASBMB},
}

@InProceedings{Hemmati2015,
  author    = {Hemmati, H. and Fang, Z. and Mantyla, M. V.},
  booktitle = {2015 {{IEEE}} 8th {{International Conference}} on {{Software Testing}}, {{Verification}} and {{Validation}} ({{ICST}})},
  title     = {Prioritizing {{Manual Test Cases}} in {{Traditional}} and {{Rapid Release Environments}}},
  year      = {2015},
  month     = apr,
  pages     = {1--10},
  abstract  = {Test case prioritization is one of the most practically useful activities in testing, specially for large scale systems. The goal is ranking the existing test cases in a way that they detect faults as soon as possible, so that any partial execution of the test suite detects maximum number of defects for the given budget. Test prioritization becomes even more important when the test execution is time consuming, e.g., manual system tests vs. automated unit tests. Most existing test case prioritization techniques are based on code coverage, which requires access to source code. However, manual testing is mainly done in a black- box manner (manual testers do not have access to the source code). Therefore, in this paper, we first examine the existing test case prioritization techniques and modify them to be applicable on manual black-box system testing. We specifically study a coverage- based, a diversity-based, and a risk driven approach for test case prioritization. Our empirical study on four older releases of Mozilla Firefox shows that none of the techniques are strongly dominating the others in all releases. However, when we study nine more recent releases of Firefox, where the development has been moved from a traditional to a more agile and rapid release environment, we see a very signifiant difference (on average 65\% effectiveness improvement) between the risk-driven approach and its alternatives. Our conclusion, based on one case study of 13 releases of an industrial system, is that test suites in rapid release environments, potentially, can be very effectively prioritized for execution, based on their historical riskiness; whereas the same conclusions do not hold in the traditional software development environments.},
  doi       = {10.1109/ICST.2015.7102602},
  groups    = {phase_start, selected},
  keywords  = {code coverage,Companies,Context,coverage-based approach,diversity-based approach,fault detection,Fault detection,historical riskiness,large scale systems,manual black-box system testing,manual test case prioritization,Manuals,Mozilla Firefox,Natural languages,online front-ends,program testing,rapid release environments,risk driven approach,Software,software fault tolerance,source code,source code (software),test execution,Testing},
  timestamp = {2019-06-17T22:40:28Z},
}

@Article{Costa2018,
  author    = {da Costa, Daniel Alencar and McIntosh, Shane and Treude, Christoph and Kulesza, Uir{\'a} and Hassan, Ahmed E.},
  journal   = {Empirical Software Engineering},
  title     = {The Impact of Rapid Release Cycles on the Integration Delay of Fixed Issues},
  year      = {2018},
  issn      = {1573-7616},
  month     = apr,
  number    = {2},
  pages     = {835--904},
  volume    = {23},
  abstract  = {The release frequency of software projects has increased in recent years. Adopters of so-called rapid releases\textemdash short release cycles, often on the order of weeks, days, or even hours\textemdash claim that they can deliver fixed issues (i.e., implemented bug fixes and new features) to users more quickly. However, there is little empirical evidence to support these claims. In fact, our prior work shows that code integration phases may introduce delays for rapidly releasing projects\textemdash 98\% of the fixed issues in the rapidly releasing Firefox project had their integration delayed by at least one release. To better understand the impact that rapid release cycles have on the integration delay of fixed issues, we perform a comparative study of traditional and rapid release cycles. Our comparative study has two parts: (i) a quantitative empirical analysis of 72,114 issue reports from the Firefox project, and a (ii) qualitative study involving 37 participants, who are contributors of the Firefox, Eclipse, and ArgoUML projects. Our study is divided into quantitative and qualitative analyses. Quantitative analyses reveal that, surprisingly, fixed issues take a median of 54\% (57 days) longer to be integrated in rapid Firefox releases than the traditional ones. To investigate the factors that are related to integration delay in traditional and rapid release cycles, we train regression models that model whether a fixed issue will have its integration delayed or not. Our explanatory models achieve good discrimination (ROC areas of 0.80\textendash 0.84) and calibration scores (Brier scores of 0.05\textendash 0.16) for rapid and traditional releases. Our explanatory models indicate that (i) traditional releases prioritize the integration of backlog issues, while (ii) rapid releases prioritize issues that were fixed in the current release cycle. Complementary qualitative analyses reveal that participants' perception about integration delay is tightly related to activities that involve decision making, risk management, and team collaboration. Moreover, the allure of shipping fixed issues faster is a main motivator for adopting rapid release cycles among participants (although this motivation is not supported by our quantitative analysis). Furthermore, to explain why traditional releases deliver fixed issues more quickly, our participants point out the rush for integration in traditional releases and the increased time that is invested on polishing issues in rapid releases. Our results suggest that rapid release cycles may not be a silver bullet for the rapid delivery of new content to users. Instead, our results suggest that the benefits of rapid releases are increased software stability and user feedback.},
  doi       = {10.1007/s10664-017-9548-7},
  groups    = {phase_start, selected},
  language  = {en},
  timestamp = {2020-10-29T18:57:24Z},
}

@Article{goloborodko2013pyteomics,
  author    = {Goloborodko, Anton A and Levitsky, Lev I and Ivanov, Mark V and Gorshkov, Mikhail V},
  journal   = {Journal of The American Society for Mass Spectrometry},
  title     = {Pyteomics—a Python framework for exploratory data analysis and rapid software prototyping in proteomics},
  year      = {2013},
  number    = {2},
  pages     = {301--304},
  volume    = {24},
  groups    = {phase_start, excluded_title},
  publisher = {ACS Publications},
}

@Article{wu2000performance,
  author    = {Wu, Yih-Min and Lee, William HK and Chen, Chen-Chun and Shin, Tzay-Chyn and Teng, Ta-Liang and Tsai, Yi-Ben},
  journal   = {Seismological Research Letters},
  title     = {Performance of the Taiwan rapid earthquake information release system (RTD) during the 1999 Chi-Chi (Taiwan) earthquake},
  year      = {2000},
  number    = {3},
  pages     = {338--343},
  volume    = {71},
  groups    = {phase_start, excluded_title},
  publisher = {Seismological Society of America},
}

@InProceedings{Kerzazi2014b,
  author     = {Kerzazi, Noureddine and Khomh, Foutse},
  booktitle  = {Proceedings of the 8th {{ACM}}/{{IEEE International Symposium}} on {{Empirical Software Engineering}} and {{Measurement}}},
  title      = {Factors Impacting Rapid Releases: An Industrial Case Study},
  year       = {2014},
  address    = {{New York, NY, USA}},
  month      = sep,
  pages      = {1--8},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{ESEM}} '14},
  abstract   = {Context: Software release teams try to reduce the time needed for the transit of features or bug fixes from the development environment to the production, crossing all the quality gates. However, little is known about the factors that influence the time-to-production and how they might be controlled in order to speed up the release cycles. Goal: This paper examines step by step the release process of an industrial software organization aiming to identify factors that have a significant impact on the lead time and outcomes of the software releases. Method: Over 14 months of release data have been analyzed (246 releases from the isolated source code branches to the production environment). Results: We discuss three dimensions under which a series of factors could be addressed: technical, organizational, and interactional. We present our findings in terms of implications for release process improvements. Conclusions: Our analyzes reveal that testing is the most time consuming activities (86\%) along with the need for more congruence among teams, especially in the context of parallel development.},
  doi        = {10.1145/2652524.2652589},
  groups     = {phase_start, selected},
  isbn       = {978-1-4503-2774-9},
  keywords   = {empirical software engineering,lead time,parallel development,rapid release,release cycles,release management,software process,software quality,software release},
  shorttitle = {Factors Impacting Rapid Releases},
  timestamp  = {2020-10-29T19:01:12Z},
}

@InProceedings{sen2006rapid,
  author       = {Sen, Dev K and Banks, Justin C and Maggio, Gaspare and Railsback, Jan},
  booktitle    = {2006 IEEE Aerospace Conference},
  title        = {Rapid development of an event tree modeling tool using COTS software},
  year         = {2006},
  organization = {IEEE},
  pages        = {8--pp},
  groups       = {phase_start, excluded_abstract},
}

@Article{Souza2015,
  author     = {Souza, R. and Chavez, C. and Bittencourt, R. A.},
  journal    = {IEEE Software},
  title      = {Rapid {{Releases}} and {{Patch Backouts}}: {{A Software Analytics Approach}}},
  year       = {2015},
  issn       = {0740-7459},
  month      = mar,
  number     = {2},
  pages      = {89--96},
  volume     = {32},
  abstract   = {Release engineering deals with decisions that impact the daily lives of developers, testers, and users and thus contribute to a product's success. Although gut feeling is important in such decisions, it's increasingly important to leverage existing data, such as bug reports, source code changes, code reviews, and test results, both to support decisions and to help evaluate current practices. The exploration of software engineering data to obtain insightful information is called software analytics.},
  doi        = {10.1109/MS.2015.30},
  groups     = {phase_start, selected},
  keywords   = {Browsers,bug reopening,Computer bugs,Continuous production,data analysis,Firefox,Linux,Market research,Marketing and sales,Mozilla,patch backouts,rapid releases,release engineering,software analytics,Software analytics,software analytics approach,software development,Software development,software engineering,Software engineering,software engineering data,Web browsers},
  shorttitle = {Rapid {{Releases}} and {{Patch Backouts}}},
  timestamp  = {2019-06-17T22:40:28Z},
}

@InProceedings{jain2006yam,
  author       = {Jain, Abhinandan and Biesiadecki, Jeffrey},
  booktitle    = {2nd IEEE International Conference on Space Mission Challenges for Information Technology (SMC-IT'06)},
  title        = {YAM-A framework for rapid software development},
  year         = {2006},
  organization = {IEEE},
  pages        = {10--pp},
  groups       = {phase_start, excluded_doubt},
}

@InProceedings{Lopez2018,
  author     = {L{\'o}pez, Lidia and {Mart{\'i}nez-Fern{\'a}ndez}, Silverio and G{\'o}mez, Cristina and Chora{\'s}, Micha{\l} and Kozik, Rafa{\l} and Guzm{\'a}n, Liliana and Vollmer, Anna Maria and Franch, Xavier and Jedlitschka, Andreas},
  booktitle  = {Information {{Systems}} in the {{Big Data Era}}},
  title      = {Q-{{Rapids Tool Prototype}}: {{Supporting Decision}}-{{Makers}} in {{Managing Quality}} in {{Rapid Software Development}}},
  year       = {2018},
  address    = {{Cham}},
  editor     = {Mendling, Jan and Mouratidis, Haralambos},
  pages      = {200--208},
  publisher  = {{Springer International Publishing}},
  series     = {Lecture {{Notes}} in {{Business Information Processing}}},
  abstract   = {Software quality is an essential competitive factor for the success of software companies today. Increasing the software quality levels of software products and services requires an adequate integration of quality requirements (QRs) in the software life-cycle, which is still scarcely supported in current rapid software development (RSD) approaches. One of the goals of the Q-Rapids (Quality-aware Rapid Software Development) method is providing tool support to decision-makers for QR management in RSD. The Q-Rapids method is based on gathering data from several and heterogeneous sources, to be aggregated into quality-related strategic indicators (e.g., customer satisfaction, product quality) and presented to decision-makers using a highly informative dashboard. The current release of Q-Rapids Tool provides four sets of functionality: (1) data gathering from source tools (e.g. GitLab, Jira, SonarQube, and Jenkins), (2) aggregation of data into three levels of abstraction (metrics, product/process factors, and strategic indicators), (3) visualization of the aggregated data, and (4) navigation through the aggregated data. The tool has been evaluated by four European companies that follow RSD processes.},
  doi        = {10.1007/978-3-319-92901-9_17},
  groups     = {phase_start, selected},
  isbn       = {978-3-319-92901-9},
  keywords   = {Agile,Dashboard,Decision-making,Non-functional requirements,Quality requirement,Rapid software development,Strategic indicator},
  language   = {en},
  shorttitle = {Q-{{Rapids Tool Prototype}}},
  timestamp  = {2020-10-29T19:07:03Z},
}

@InProceedings{rousseaux2009rapid,
  author       = {Rousseaux, Francis and Lhoste, Kevin},
  booktitle    = {2009 Second International Conferences on Advances in Computer-Human Interactions},
  title        = {Rapid software prototyping using ajax and google map api},
  year         = {2009},
  organization = {IEEE},
  pages        = {317--323},
  groups       = {phase_start, excluded_doubt},
}

@InProceedings{lohner2000rapid,
  author       = {Lohner, M and Jones, CD},
  title        = {Rapid Software Development for CLEO III},
  year         = {2000},
  organization = {Citeseer},
  groups       = {phase_start, excluded_doubt},
}

@Article{chu2009cholesterol,
  author    = {Chu, Jessica and Thomas, L Michael and Watkins, Simon C and Franchi, Luigi and N{\'u}{\~n}ez, Gabriel and Salter, Russell D},
  journal   = {Journal of leukocyte biology},
  title     = {Cholesterol-dependent cytolysins induce rapid release of mature IL-1$\beta$ from murine macrophages in a NLRP3 inflammasome and cathepsin B-dependent manner},
  year      = {2009},
  number    = {5},
  pages     = {1227--1238},
  volume    = {86},
  groups    = {phase_start, excluded_title},
  publisher = {Wiley Online Library},
}

@Article{goodenough2000testosterone,
  author    = {Goodenough, Sharon and Engert, Stefanie and Behl, Christian},
  journal   = {Neuroscience letters},
  title     = {Testosterone stimulates rapid secretory amyloid precursor protein release from rat hypothalamic cells via the activation of the mitogen-activated protein kinase pathway},
  year      = {2000},
  number    = {1},
  pages     = {49--52},
  volume    = {296},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@Article{khan1998maxcred,
  author    = {Khan, Faisal I and Abbasi, SA},
  journal   = {Environmental modelling \& software},
  title     = {MAXCRED--a new software package for rapid risk assessment in chemical process industries},
  year      = {1998},
  number    = {1},
  pages     = {11--25},
  volume    = {14},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@InProceedings{Souza2014,
  author     = {Souza, R. and Chavez, C. and Bittencourt, R. A.},
  booktitle  = {2014 {{Brazilian Symposium}} on {{Software Engineering}}},
  title      = {Do {{Rapid Releases Affect Bug Reopening}}? {{A Case Study}} of {{Firefox}}},
  year       = {2014},
  month      = sep,
  pages      = {31--40},
  abstract   = {Large software organizations have been adopting rapid release cycles to deliver features and bug fixes earlier to their users. Because this approach reduces time for testing, it raises concerns about the effectiveness of quality assurance in this setting. In this paper, we study how the adoption of rapid release cycles impacts bug reopening rate, an indicator for the quality of the bug fixing process. To this end, we analyze thousands of bug reports from Mozilla Firefox, both before and after their adoption of rapid releases. Results suggest that the bug reopening rate of versions developed in rapid cycles was about 7\% higher. Also, as a warning to the software analytics community, we report contradictory results from three attempts to answer our research question, performed with varying degrees of knowledge about the Firefox release process.},
  doi        = {10.1109/SBES.2014.10},
  groups     = {phase_start, selected},
  keywords   = {bug fixing process,bug reopening rate,bug reports,Computer bugs,Databases,Educational institutions,Electronic mail,Internet,Mozilla Firefox,online front-ends,program debugging,program testing,quality assurance,rapid release cycles,Software,software analytics community,software quality,Testing},
  shorttitle = {Do {{Rapid Releases Affect Bug Reopening}}?},
  timestamp  = {2019-06-17T22:02:05Z},
}

@InProceedings{martinez2018quality,
  author       = {Mart{\'\i}nez-Fern{\'a}ndez, Silverio and Jedlitschka, Andreas and Guzm{\'a}n, Liliana and Vollmer, Anna Maria},
  booktitle    = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {A quality model for actionable analytics in rapid software development},
  year         = {2018},
  organization = {IEEE},
  pages        = {370--377},
  groups       = {phase_start, excluded_doubt},
}

@InProceedings{Tichy2015,
  author    = {Tichy, M. and Bosch, J. and Goedicke, M. and Fitzgerald, B.},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  title     = {2nd {{International Workshop}} on {{Rapid Continuous Software Engineering}} ({{RCoSE}} 2015)},
  year      = {2015},
  month     = may,
  pages     = {993--994},
  volume    = {2},
  abstract  = {Continuous software engineering refers to the organizational capability to develop, release and learn from software in very short rapid cycles, typically hours, days or a very small numbers of weeks. This requires not only agile processes in teams but in the complete research and development organization. Additionally, the technology used in the different development phases, like requirements engineering and system integration, must support the quick development cycles. Finally, automatic live experimentation for different system alternatives enables fast gathering of required data for decision making. The workshop, the second in the series after the first one at ICSE 2014, aims to bring the research communities of the aforementioned areas together to exchange challenges, ideas, and solutions to bring software engineering a step further to being a holistic continuous process. The workshop program is based on eight papers selected in the peer-review process and supplemented by interaction and discussions at the workshop. The topics range from agile methods, continuous software engineering practices to specific techniques, like visualization and testing.},
  doi       = {10.1109/ICSE.2015.343},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\6SL94AQE\\Tichy et al. - 2015 - 2nd International Workshop on Rapid Continuous Sof.pdf:application/pdf},
  groups    = {phase_start, selected},
  issn      = {1558-1225},
  keywords  = {Companies,Conferences,Software,Software engineering,Testing},
  timestamp = {2020-10-29T19:17:48Z},
}

@Article{Hemmati2017,
  author     = {Hemmati, Hadi and Fang, Zhihan and M{\"a}ntyl{\"a}, Mika V. and Adams, Bram},
  journal    = {Software Testing, Verification and Reliability},
  title      = {Prioritizing Manual Test Cases in Rapid Release Environments},
  year       = {2017},
  issn       = {1099-1689},
  number     = {6},
  pages      = {e1609},
  volume     = {27},
  abstract   = {Test case prioritization is an important testing activity, in practice, specially for large scale systems. The goal is to rank the existing test cases in a way that they detect faults as soon as possible, so that any partial execution of the test suite detects the maximum number of defects for the given budget. Test prioritization becomes even more important when the test execution is time consuming, for example, manual system tests versus automated unit tests. Most existing test case prioritization techniques are based on code coverage, which requires access to source code. However, manual testing is mainly performed in a black-box manner (manual testers do not have access to the source code). Therefore, in this paper, the existing test case prioritization techniques (e.g. diversity-based and history-based techniques) are examined and modified to be applicable on manual black-box system testing. An empirical study on four older releases of desktop Firefox showed that none of the techniques were strongly dominating the others in all releases. However, when nine more recent releases of desktop Firefox, where the development has been moved from a traditional to a more agile and rapid release environment, were studied, a very significant difference between the history-based approach and its alternatives was observed. The higher effectiveness of the history-based approach compared with alternatives also held on 28 additional rapid releases of other Firefox projects \textendash{} mobile Firefox and tablet Firefox. The conclusion of the paper is that test cases in rapid release environments can be very effectively prioritized for execution, based on their historical failure knowledge. In particular, it is the recency of historical knowledge that explains its effectiveness in rapid release environments rather than other changes in the process. Copyright \textcopyright{} 2016 John Wiley \& Sons, Ltd.},
  annotation = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/stvr.1609},
  copyright  = {Copyright \textcopyright{} 2016 John Wiley \& Sons, Ltd.},
  doi        = {10.1002/stvr.1609},
  groups     = {phase_start, selected},
  keywords   = {historical data,manual testing,rapid release,test case prioritization,text mining},
  language   = {en},
  timestamp  = {2020-10-29T19:18:50Z},
}

@Article{rochael2015classical,
  author    = {Rochael, Natalia C and Guimar{\~a}es-Costa, Anderson B and Nascimento, Michelle TC and DeSouza-Vieira, Thiago S and Oliveira, Matheus P and e Souza, Luiz F Garcia and Oliveira, Marcus F and Saraiva, Elvira M},
  journal   = {Scientific reports},
  title     = {Classical ROS-dependent and early/rapid ROS-independent release of neutrophil extracellular traps triggered by Leishmania parasites},
  year      = {2015},
  number    = {1},
  pages     = {1--11},
  volume    = {5},
  groups    = {phase_start, excluded_title},
  publisher = {Nature Publishing Group},
}

@Article{brune1994direct,
  author    = {Brune, Martin and Hunter, Jackie L and Corrie, John ET and Webb, Martin R},
  journal   = {Biochemistry},
  title     = {Direct, real-time measurement of rapid inorganic phosphate release using a novel fluorescent probe and its application to actomyosin subfragment 1 ATPase},
  year      = {1994},
  number    = {27},
  pages     = {8262--8271},
  volume    = {33},
  groups    = {phase_start, excluded_title},
  publisher = {ACS Publications},
}

@Article{gerasimenko1998calcium,
  author    = {Gerasimenko, Julia V and Tepikin, Alexei V and Petersen, Ole H and Gerasimenko, Oleg V},
  journal   = {Current Biology},
  title     = {Calcium uptake via endocytosis with rapid release from acidifying endosomes},
  year      = {1998},
  number    = {24},
  pages     = {1335--1338},
  volume    = {8},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@Article{chiang2015rapid,
  author    = {Chiang, Wei-Lun and Lin, Tzu-Tsen and Sureshbabu, Radhakrishnan and Chia, Wei-Tso and Hsiao, Hsu-Chan and Liu, Hung-Yi and Yang, Chih-Man and Sung, Hsing-Wen},
  journal   = {Journal of Controlled Release},
  title     = {A rapid drug release system with a NIR light-activated molecular switch for dual-modality photothermal/antibiotic treatments of subcutaneous abscesses},
  year      = {2015},
  pages     = {53--62},
  volume    = {199},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:selected\;0\;0\;0x8a8a8aff\;\;\;;
1 StaticGroup:excluded\;2\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:excluded_title\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:excluded_abstract\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:excluded_doubt\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:phase\;2\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:phase_start\;0\;1\;0x8a8a8aff\;\;\;;
}
