% Encoding: UTF-8

@Article{Khomh2015,
  author    = {Khomh, Foutse and Adams, Bram and Dhaliwal, Tejinder and Zou, Ying},
  journal   = {Empirical Software Engineering},
  title     = {Understanding the Impact of Rapid Releases on Software Quality},
  year      = {2015},
  issn      = {1573-7616},
  month     = apr,
  number    = {2},
  pages     = {336--373},
  volume    = {20},
  abstract  = {Many software companies are shifting from the traditional multi-month release cycle to shorter release cycles. For example, Google Chrome and Mozilla Firefox release new versions every 6 weeks. These shorter release cycles reduce the users' waiting time for a new release and offer better feedback and marketing opportunities to companies, but it is unclear if the quality of the software product improves as well, since developers and testers are under more pressure. In this paper, we extend our previous empirical study of Mozilla Firefox on the impact of rapid releases on quality assurance with feedback by Mozilla project members. The study compares crash rates, median uptime, and the proportion of pre- and post-release bugs in traditional releases with those in rapid releases, and we also analyze the source code changes made by developers to identify potential changes in the development process. We found that (1) with shorter release cycles, users do not experience significantly more pre- or post-release bugs (percentage-wise) and (2) bugs are fixed faster, yet (3) users experience these bugs earlier during software execution (the program crashes earlier). Increased integration activity and propagation of harder bugs to later versions account for some of these findings. Overall, our case study suggests that a clear release engineering process with thorough automation is one of the major challenges when switching to rapid releases.},
  doi       = {10.1007/s10664-014-9308-x},
  file      = {Springer Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\SNAK3FIA\\Khomh et al. - 2015 - Understanding the impact of rapid releases on soft.pdf:application/pdf},
  groups    = {selected, phase_start},
  keywords  = {Bugs,Release cycle,Software quality,Software release,Testing},
  language  = {en},
  timestamp = {2019-06-30T03:23:08Z},
}

@InProceedings{Guzman2017,
  author     = {Guzm{\'a}n, Liliana and Oriol, Marc and Rodr{\'i}guez, Pilar and Franch, Xavier and Jedlitschka, Andreas and Oivo, Markku},
  booktitle  = {Requirements {{Engineering}}: {{Foundation}} for {{Software Quality}}},
  title      = {How {{Can Quality Awareness Support Rapid Software Development}}? \textendash{} {{A Research Preview}}},
  year       = {2017},
  editor     = {Gr{\"u}nbacher, Paul and Perini, Anna},
  pages      = {167--173},
  publisher  = {{Springer International Publishing}},
  series     = {Lecture {{Notes}} in {{Computer Science}}},
  abstract   = {Context and Motivation: Rapid software development (RSD) refers to the organizational capability to develop, release, and learn from software in rapid cycles without compromising its quality. To achieve RSD, it is essential to understand and manage software quality along the software lifecycle. Question/Problem: Despite the numerous information sources related to product quality, there is a lack of mechanisms for supporting continuous quality management throughout the whole RSD process. Principal ideas/Results: We propose Q-Rapids, a data-driven, quality-aware RSD framework in which quality and functional requirements are managed together. Quality requirements are incrementally elicited and refined based on data gathered at both development time and runtime. Project, development, and runtime data is aggregated into quality-related indicators to support decision makers in steering future development cycles. Contributions: Q-Rapids aims to increase software quality through continuous data gathering and analysis, as well as continuous management of quality requirements.},
  groups     = {selected, phase_start},
  isbn       = {978-3-319-54045-0},
  keywords   = {Quality requirements,Rapid software development,Software quality},
  language   = {en},
  shorttitle = {How {{Can Quality Awareness Support Rapid Software Development}}?},
  timestamp  = {2019-06-29T22:40:39Z},
}

@InProceedings{Mantyla2013,
  author    = {M{\"a}ntyl{\"a}, M. V. and Khomh, F. and Adams, B. and Engstr{\"o}m, E. and Petersen, K.},
  booktitle = {2013 {{IEEE International Conference}} on {{Software Maintenance}}},
  title     = {On {{Rapid Releases}} and {{Software Testing}}},
  year      = {2013},
  month     = sep,
  pages     = {20--29},
  abstract  = {Large open and closed source organizations like Google, Facebook and Mozilla are migrating their products towards rapid releases. While this allows faster time-to-market and user feedback, it also implies less time for testing and bug fixing. Since initial research results indeed show that rapid releases fix proportionally less reported bugs than traditional releases, this paper investigates the changes in software testing effort after moving to rapid releases. We analyze the results of 312,502 execution runs of the 1,547 mostly manual system level test cases of Mozilla Fire fox from 2006 to 2012 (5 major traditional and 9 major rapid releases), and triangulated our findings with a Mozilla QA engineer. In rapid releases, testing has a narrower scope that enables deeper investigation of the features and regressions with the highest risk, while traditional releases run the whole test suite. Furthermore, rapid releases make it more difficult to build a large testing community, forcing Mozilla to increase contractor resources in order to sustain testing for rapid releases.},
  doi       = {10.1109/ICSM.2013.13},
  groups    = {selected, phase_start},
  keywords  = {agile releases,Browsers,bugs,builds,Computer bugs,Google,manual system-level test cases,Measurement,Mozilla,Mozilla Firefox,Mozilla QA engineer,opensource,program testing,rapid release models,release model,Software,software testing,Software testing},
  timestamp = {2019-06-17T22:40:27Z},
}

@InProceedings{Clark2014,
  author     = {Clark, Sandy and Collis, Michael and Blaze, Matt and Smith, Jonathan M.},
  booktitle  = {Proceedings of the 2014 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  title      = {Moving {{Targets}}: {{Security}} and {{Rapid}}-{{Release}} in {{Firefox}}},
  year       = {2014},
  address    = {{New York, NY, USA}},
  pages      = {1256--1266},
  publisher  = {{ACM}},
  series     = {{{CCS}} '14},
  abstract   = {Software engineering practices strongly affect the security of the code produced. The increasingly popular Rapid Release Cycle (RRC) development methodology and easy network software distribution have enabled rapid feature introduction. RRC's defining characteristic of frequent software revisions would seem to conflict with traditional software engineering wisdom regarding code maturity, reliability and reuse, as well as security. Our investigation of the consequences of rapid release comprises a quantitative, data-driven study of the impact of rapid-release methodology on the security of the Mozilla Firefox browser. We correlate reported vulnerabilities in multiple rapid release versions of Firefox code against those in corresponding extended release versions of the same system; using a common software base with different release cycles eliminates many causes other than RRC for the observables. Surprisingly, the resulting data show that Firefox RRC does not result in higher vulnerability rates and, further, that it is exactly the unfamiliar, newly released software (the "moving targets") that requires time to exploit. These provocative results suggest that a rethinking of the consequences of software engineering practices for security may be warranted.},
  doi        = {10.1145/2660267.2660320},
  file       = {ACM Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\KAVQVI4H\\Clark et al. - 2014 - Moving Targets Security and Rapid-Release in Fire.pdf:application/pdf},
  groups     = {selected, phase_start},
  isbn       = {978-1-4503-2957-6},
  keywords   = {agile programming,firefox,honeymoon effect:arms race,rapid release cycle,secure software development models,secure software metrics,security,software life-cycle,software qualitysecure software development,vulnerabilities,windows of vulnerability},
  shorttitle = {Moving {{Targets}}},
  timestamp  = {2019-06-26T01:27:26Z},
}

@Article{wu1997taiwan,
  author    = {Wu, Yih-Min and Shin, Tzay-Chyn and Chen, Chen-Chun and Tsai, Yi-Ben and Lee, William HK and Teng, Ta Liang},
  journal   = {Seismological Research Letters},
  title     = {Taiwan rapid earthquake information release system},
  year      = {1997},
  number    = {6},
  pages     = {931--943},
  volume    = {68},
  groups    = {excluded_title, phase_start},
  publisher = {Seismological Society of America},
}

@Article{Mantyla2015,
  author     = {M{\"a}ntyl{\"a}, Mika V. and Adams, Bram and Khomh, Foutse and Engstr{\"o}m, Emelie and Petersen, Kai},
  journal    = {Empirical Software Engineering},
  title      = {On Rapid Releases and Software Testing: A Case Study and a Semi-Systematic Literature Review},
  year       = {2015},
  issn       = {1573-7616},
  month      = oct,
  number     = {5},
  pages      = {1384--1425},
  volume     = {20},
  abstract   = {Large open and closed source organizations like Google, Facebook and Mozilla are migrating their products towards rapid releases. While this allows faster time-to-market and user feedback, it also implies less time for testing and bug fixing. Since initial research results indeed show that rapid releases fix proportionally less reported bugs than traditional releases, this paper investigates the changes in software testing effort after moving to rapid releases in the context of a case study on Mozilla Firefox, and performs a semi-systematic literature review. The case study analyzes the results of 312,502 execution runs of the 1,547 mostly manual system-level test cases of Mozilla Firefox from 2006 to 2012 (5 major traditional and 9 major rapid releases), and triangulates our findings with a Mozilla QA engineer. We find that rapid releases have a narrower test scope that enables a deeper investigation of the features and regressions with the highest risk. Furthermore, rapid releases make testing more continuous and have proportionally smaller spikes before the main release. However, rapid releases make it more difficult to build a large testing community , and they decrease test suite diversity and make testing more deadline oriented. In addition, our semi-systematic literature review presents the benefits, problems and enablers of rapid releases from 24 papers found using systematic search queries and a similar amount of papers found through other means. The literature review shows that rapid releases are a prevalent industrial practice that are utilized even in some highly critical domains of software engineering, and that rapid releases originated from several software development methodologies such as agile, open source, lean and internet-speed software development. However, empirical studies proving evidence of the claimed advantages and disadvantages of rapid releases are scarce.},
  doi        = {10.1007/s10664-014-9338-4},
  groups     = {selected, phase_start},
  keywords   = {Agile releases,Bugs,Builds,Mozilla,Open-source,Release model,Software testing},
  language   = {en},
  shorttitle = {On Rapid Releases and Software Testing},
  timestamp  = {2019-06-17T22:40:28Z},
}

@InProceedings{daCosta2016a,
  author     = {{da Costa}, Daniel Alencar and McIntosh, Shane and Kulesza, Uir{\'a} and Hassan, Ahmed E.},
  booktitle  = {Proceedings of the 13th {{International Conference}} on {{Mining Software Repositories}}},
  title      = {The Impact of Switching to a Rapid Release Cycle on the Integration Delay of Addressed Issues: An Empirical Study of the Mozilla Firefox Project},
  year       = {2016},
  address    = {{New York, NY, USA}},
  month      = may,
  pages      = {374--385},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{MSR}} '16},
  abstract   = {The release frequency of software projects has increased in recent years. Adopters of so-called rapid release cycles claim that they can deliver addressed issues (i.e., bugs, enhancements, and new features) to users more quickly. However, there is little empirical evidence to support these claims. In fact, in our prior work, we found that code integration phases may introduce delays in rapidly releasing software --- 98\% of addressed issues in the rapidly releasing Firefox project had their integration delayed by at least one release. To better understand the impact that rapid release cycles have on the integration delay of addressed issues, we perform a comparative study of traditional and rapid release cycles. Through an empirical study of 72,114 issue reports from the Firefox system, we observe that, surprisingly, addressed issues take a median of 50 days longer to be integrated in rapid Firefox releases than the traditional ones. To investigate the factors that are related to integration delay in traditional and rapid release cycles, we train regression models that explain if an addressed issue will have its integration delayed or not. Our explanatory models achieve good discrimination (ROC areas of 0.81-0.83) and calibration scores (Brier scores of 0.05-0.16). Deeper analysis of our explanatory models indicates that traditional releases prioritize the integration of backlog issues, while rapid releases prioritize issues that were addressed during the current release cycle. Our results suggest that rapid release cycles may not be a silver bullet for the rapid delivery of addressed issues to users.},
  doi        = {10.1145/2901739.2901764},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\R2XF9NSH\\da Costa et al. - 2016 - The impact of switching to a rapid release cycle o.pdf:application/pdf},
  groups     = {selected, phase_start},
  isbn       = {978-1-4503-4186-8},
  shorttitle = {The Impact of Switching to a Rapid Release Cycle on the Integration Delay of Addressed Issues},
  timestamp  = {2020-10-29T18:53:46Z},
}

@Article{arnoult2005release,
  author    = {Arnoult, Damien and Grodet, Alain and Lee, Yang-Ja and Estaquier, J{\'e}r{\^o}me and Blackstone, Craig},
  journal   = {Journal of Biological Chemistry},
  title     = {Release of OPA1 during apoptosis participates in the rapid and complete release of cytochrome c and subsequent mitochondrial fragmentation},
  year      = {2005},
  number    = {42},
  pages     = {35742--35750},
  volume    = {280},
  groups    = {phase_start, excluded_title},
  publisher = {ASBMB},
}

@InProceedings{Hemmati2015,
  author    = {Hemmati, H. and Fang, Z. and Mantyla, M. V.},
  booktitle = {2015 {{IEEE}} 8th {{International Conference}} on {{Software Testing}}, {{Verification}} and {{Validation}} ({{ICST}})},
  title     = {Prioritizing {{Manual Test Cases}} in {{Traditional}} and {{Rapid Release Environments}}},
  year      = {2015},
  month     = apr,
  pages     = {1--10},
  abstract  = {Test case prioritization is one of the most practically useful activities in testing, specially for large scale systems. The goal is ranking the existing test cases in a way that they detect faults as soon as possible, so that any partial execution of the test suite detects maximum number of defects for the given budget. Test prioritization becomes even more important when the test execution is time consuming, e.g., manual system tests vs. automated unit tests. Most existing test case prioritization techniques are based on code coverage, which requires access to source code. However, manual testing is mainly done in a black- box manner (manual testers do not have access to the source code). Therefore, in this paper, we first examine the existing test case prioritization techniques and modify them to be applicable on manual black-box system testing. We specifically study a coverage- based, a diversity-based, and a risk driven approach for test case prioritization. Our empirical study on four older releases of Mozilla Firefox shows that none of the techniques are strongly dominating the others in all releases. However, when we study nine more recent releases of Firefox, where the development has been moved from a traditional to a more agile and rapid release environment, we see a very signifiant difference (on average 65\% effectiveness improvement) between the risk-driven approach and its alternatives. Our conclusion, based on one case study of 13 releases of an industrial system, is that test suites in rapid release environments, potentially, can be very effectively prioritized for execution, based on their historical riskiness; whereas the same conclusions do not hold in the traditional software development environments.},
  doi       = {10.1109/ICST.2015.7102602},
  groups    = {phase_start, selected},
  keywords  = {code coverage,Companies,Context,coverage-based approach,diversity-based approach,fault detection,Fault detection,historical riskiness,large scale systems,manual black-box system testing,manual test case prioritization,Manuals,Mozilla Firefox,Natural languages,online front-ends,program testing,rapid release environments,risk driven approach,Software,software fault tolerance,source code,source code (software),test execution,Testing},
  timestamp = {2019-06-17T22:40:28Z},
}

@Article{Costa2018,
  author    = {da Costa, Daniel Alencar and McIntosh, Shane and Treude, Christoph and Kulesza, Uir{\'a} and Hassan, Ahmed E.},
  journal   = {Empirical Software Engineering},
  title     = {The Impact of Rapid Release Cycles on the Integration Delay of Fixed Issues},
  year      = {2018},
  issn      = {1573-7616},
  month     = apr,
  number    = {2},
  pages     = {835--904},
  volume    = {23},
  abstract  = {The release frequency of software projects has increased in recent years. Adopters of so-called rapid releases\textemdash short release cycles, often on the order of weeks, days, or even hours\textemdash claim that they can deliver fixed issues (i.e., implemented bug fixes and new features) to users more quickly. However, there is little empirical evidence to support these claims. In fact, our prior work shows that code integration phases may introduce delays for rapidly releasing projects\textemdash 98\% of the fixed issues in the rapidly releasing Firefox project had their integration delayed by at least one release. To better understand the impact that rapid release cycles have on the integration delay of fixed issues, we perform a comparative study of traditional and rapid release cycles. Our comparative study has two parts: (i) a quantitative empirical analysis of 72,114 issue reports from the Firefox project, and a (ii) qualitative study involving 37 participants, who are contributors of the Firefox, Eclipse, and ArgoUML projects. Our study is divided into quantitative and qualitative analyses. Quantitative analyses reveal that, surprisingly, fixed issues take a median of 54\% (57 days) longer to be integrated in rapid Firefox releases than the traditional ones. To investigate the factors that are related to integration delay in traditional and rapid release cycles, we train regression models that model whether a fixed issue will have its integration delayed or not. Our explanatory models achieve good discrimination (ROC areas of 0.80\textendash 0.84) and calibration scores (Brier scores of 0.05\textendash 0.16) for rapid and traditional releases. Our explanatory models indicate that (i) traditional releases prioritize the integration of backlog issues, while (ii) rapid releases prioritize issues that were fixed in the current release cycle. Complementary qualitative analyses reveal that participants' perception about integration delay is tightly related to activities that involve decision making, risk management, and team collaboration. Moreover, the allure of shipping fixed issues faster is a main motivator for adopting rapid release cycles among participants (although this motivation is not supported by our quantitative analysis). Furthermore, to explain why traditional releases deliver fixed issues more quickly, our participants point out the rush for integration in traditional releases and the increased time that is invested on polishing issues in rapid releases. Our results suggest that rapid release cycles may not be a silver bullet for the rapid delivery of new content to users. Instead, our results suggest that the benefits of rapid releases are increased software stability and user feedback.},
  doi       = {10.1007/s10664-017-9548-7},
  groups    = {phase_start, selected},
  language  = {en},
  timestamp = {2020-10-29T18:57:24Z},
}

@Article{goloborodko2013pyteomics,
  author    = {Goloborodko, Anton A and Levitsky, Lev I and Ivanov, Mark V and Gorshkov, Mikhail V},
  journal   = {Journal of The American Society for Mass Spectrometry},
  title     = {Pyteomics—a Python framework for exploratory data analysis and rapid software prototyping in proteomics},
  year      = {2013},
  number    = {2},
  pages     = {301--304},
  volume    = {24},
  groups    = {phase_start, excluded_title},
  publisher = {ACS Publications},
}

@Article{wu2000performance,
  author    = {Wu, Yih-Min and Lee, William HK and Chen, Chen-Chun and Shin, Tzay-Chyn and Teng, Ta-Liang and Tsai, Yi-Ben},
  journal   = {Seismological Research Letters},
  title     = {Performance of the Taiwan rapid earthquake information release system (RTD) during the 1999 Chi-Chi (Taiwan) earthquake},
  year      = {2000},
  number    = {3},
  pages     = {338--343},
  volume    = {71},
  groups    = {phase_start, excluded_title},
  publisher = {Seismological Society of America},
}

@InProceedings{Kerzazi2014b,
  author     = {Kerzazi, Noureddine and Khomh, Foutse},
  booktitle  = {Proceedings of the 8th {{ACM}}/{{IEEE International Symposium}} on {{Empirical Software Engineering}} and {{Measurement}}},
  title      = {Factors Impacting Rapid Releases: An Industrial Case Study},
  year       = {2014},
  address    = {{New York, NY, USA}},
  month      = sep,
  pages      = {1--8},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{ESEM}} '14},
  abstract   = {Context: Software release teams try to reduce the time needed for the transit of features or bug fixes from the development environment to the production, crossing all the quality gates. However, little is known about the factors that influence the time-to-production and how they might be controlled in order to speed up the release cycles. Goal: This paper examines step by step the release process of an industrial software organization aiming to identify factors that have a significant impact on the lead time and outcomes of the software releases. Method: Over 14 months of release data have been analyzed (246 releases from the isolated source code branches to the production environment). Results: We discuss three dimensions under which a series of factors could be addressed: technical, organizational, and interactional. We present our findings in terms of implications for release process improvements. Conclusions: Our analyzes reveal that testing is the most time consuming activities (86\%) along with the need for more congruence among teams, especially in the context of parallel development.},
  doi        = {10.1145/2652524.2652589},
  groups     = {phase_start, selected},
  isbn       = {978-1-4503-2774-9},
  keywords   = {empirical software engineering,lead time,parallel development,rapid release,release cycles,release management,software process,software quality,software release},
  shorttitle = {Factors Impacting Rapid Releases},
  timestamp  = {2020-10-29T19:01:12Z},
}

@InProceedings{sen2006rapid,
  author       = {Sen, Dev K and Banks, Justin C and Maggio, Gaspare and Railsback, Jan},
  booktitle    = {2006 IEEE Aerospace Conference},
  title        = {Rapid development of an event tree modeling tool using COTS software},
  year         = {2006},
  organization = {IEEE},
  pages        = {8--pp},
  groups       = {phase_start, excluded_abstract},
}

@Article{Souza2015,
  author     = {Souza, R. and Chavez, C. and Bittencourt, R. A.},
  journal    = {IEEE Software},
  title      = {Rapid {{Releases}} and {{Patch Backouts}}: {{A Software Analytics Approach}}},
  year       = {2015},
  issn       = {0740-7459},
  month      = mar,
  number     = {2},
  pages      = {89--96},
  volume     = {32},
  abstract   = {Release engineering deals with decisions that impact the daily lives of developers, testers, and users and thus contribute to a product's success. Although gut feeling is important in such decisions, it's increasingly important to leverage existing data, such as bug reports, source code changes, code reviews, and test results, both to support decisions and to help evaluate current practices. The exploration of software engineering data to obtain insightful information is called software analytics.},
  doi        = {10.1109/MS.2015.30},
  groups     = {phase_start, selected},
  keywords   = {Browsers,bug reopening,Computer bugs,Continuous production,data analysis,Firefox,Linux,Market research,Marketing and sales,Mozilla,patch backouts,rapid releases,release engineering,software analytics,Software analytics,software analytics approach,software development,Software development,software engineering,Software engineering,software engineering data,Web browsers},
  shorttitle = {Rapid {{Releases}} and {{Patch Backouts}}},
  timestamp  = {2019-06-17T22:40:28Z},
}

@InProceedings{jain2006yam,
  author       = {Jain, Abhinandan and Biesiadecki, Jeffrey},
  booktitle    = {2nd IEEE International Conference on Space Mission Challenges for Information Technology (SMC-IT'06)},
  title        = {YAM-A framework for rapid software development},
  year         = {2006},
  organization = {IEEE},
  pages        = {10--pp},
  groups       = {phase_start, excluded_doubt},
}

@InProceedings{Lopez2018,
  author     = {L{\'o}pez, Lidia and {Mart{\'i}nez-Fern{\'a}ndez}, Silverio and G{\'o}mez, Cristina and Chora{\'s}, Micha{\l} and Kozik, Rafa{\l} and Guzm{\'a}n, Liliana and Vollmer, Anna Maria and Franch, Xavier and Jedlitschka, Andreas},
  booktitle  = {Information {{Systems}} in the {{Big Data Era}}},
  title      = {Q-{{Rapids Tool Prototype}}: {{Supporting Decision}}-{{Makers}} in {{Managing Quality}} in {{Rapid Software Development}}},
  year       = {2018},
  address    = {{Cham}},
  editor     = {Mendling, Jan and Mouratidis, Haralambos},
  pages      = {200--208},
  publisher  = {{Springer International Publishing}},
  series     = {Lecture {{Notes}} in {{Business Information Processing}}},
  abstract   = {Software quality is an essential competitive factor for the success of software companies today. Increasing the software quality levels of software products and services requires an adequate integration of quality requirements (QRs) in the software life-cycle, which is still scarcely supported in current rapid software development (RSD) approaches. One of the goals of the Q-Rapids (Quality-aware Rapid Software Development) method is providing tool support to decision-makers for QR management in RSD. The Q-Rapids method is based on gathering data from several and heterogeneous sources, to be aggregated into quality-related strategic indicators (e.g., customer satisfaction, product quality) and presented to decision-makers using a highly informative dashboard. The current release of Q-Rapids Tool provides four sets of functionality: (1) data gathering from source tools (e.g. GitLab, Jira, SonarQube, and Jenkins), (2) aggregation of data into three levels of abstraction (metrics, product/process factors, and strategic indicators), (3) visualization of the aggregated data, and (4) navigation through the aggregated data. The tool has been evaluated by four European companies that follow RSD processes.},
  doi        = {10.1007/978-3-319-92901-9_17},
  groups     = {phase_start, selected},
  isbn       = {978-3-319-92901-9},
  keywords   = {Agile,Dashboard,Decision-making,Non-functional requirements,Quality requirement,Rapid software development,Strategic indicator},
  language   = {en},
  shorttitle = {Q-{{Rapids Tool Prototype}}},
  timestamp  = {2020-10-29T19:07:03Z},
}

@InProceedings{rousseaux2009rapid,
  author       = {Rousseaux, Francis and Lhoste, Kevin},
  booktitle    = {2009 Second International Conferences on Advances in Computer-Human Interactions},
  title        = {Rapid software prototyping using ajax and google map api},
  year         = {2009},
  organization = {IEEE},
  pages        = {317--323},
  groups       = {phase_start, excluded_doubt},
}

@InProceedings{lohner2000rapid,
  author       = {Lohner, M and Jones, CD},
  title        = {Rapid Software Development for CLEO III},
  year         = {2000},
  organization = {Citeseer},
  groups       = {phase_start, excluded_doubt},
}

@Article{chu2009cholesterol,
  author    = {Chu, Jessica and Thomas, L Michael and Watkins, Simon C and Franchi, Luigi and N{\'u}{\~n}ez, Gabriel and Salter, Russell D},
  journal   = {Journal of leukocyte biology},
  title     = {Cholesterol-dependent cytolysins induce rapid release of mature IL-1$\beta$ from murine macrophages in a NLRP3 inflammasome and cathepsin B-dependent manner},
  year      = {2009},
  number    = {5},
  pages     = {1227--1238},
  volume    = {86},
  groups    = {phase_start, excluded_title},
  publisher = {Wiley Online Library},
}

@Article{goodenough2000testosterone,
  author    = {Goodenough, Sharon and Engert, Stefanie and Behl, Christian},
  journal   = {Neuroscience letters},
  title     = {Testosterone stimulates rapid secretory amyloid precursor protein release from rat hypothalamic cells via the activation of the mitogen-activated protein kinase pathway},
  year      = {2000},
  number    = {1},
  pages     = {49--52},
  volume    = {296},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@Article{khan1998maxcred,
  author    = {Khan, Faisal I and Abbasi, SA},
  journal   = {Environmental modelling \& software},
  title     = {MAXCRED--a new software package for rapid risk assessment in chemical process industries},
  year      = {1998},
  number    = {1},
  pages     = {11--25},
  volume    = {14},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@InProceedings{Souza2014,
  author     = {Souza, R. and Chavez, C. and Bittencourt, R. A.},
  booktitle  = {2014 {{Brazilian Symposium}} on {{Software Engineering}}},
  title      = {Do {{Rapid Releases Affect Bug Reopening}}? {{A Case Study}} of {{Firefox}}},
  year       = {2014},
  month      = sep,
  pages      = {31--40},
  abstract   = {Large software organizations have been adopting rapid release cycles to deliver features and bug fixes earlier to their users. Because this approach reduces time for testing, it raises concerns about the effectiveness of quality assurance in this setting. In this paper, we study how the adoption of rapid release cycles impacts bug reopening rate, an indicator for the quality of the bug fixing process. To this end, we analyze thousands of bug reports from Mozilla Firefox, both before and after their adoption of rapid releases. Results suggest that the bug reopening rate of versions developed in rapid cycles was about 7\% higher. Also, as a warning to the software analytics community, we report contradictory results from three attempts to answer our research question, performed with varying degrees of knowledge about the Firefox release process.},
  doi        = {10.1109/SBES.2014.10},
  groups     = {phase_start, selected},
  keywords   = {bug fixing process,bug reopening rate,bug reports,Computer bugs,Databases,Educational institutions,Electronic mail,Internet,Mozilla Firefox,online front-ends,program debugging,program testing,quality assurance,rapid release cycles,Software,software analytics community,software quality,Testing},
  shorttitle = {Do {{Rapid Releases Affect Bug Reopening}}?},
  timestamp  = {2019-06-17T22:02:05Z},
}

@InProceedings{martinez2018quality,
  author       = {Mart{\'\i}nez-Fern{\'a}ndez, Silverio and Jedlitschka, Andreas and Guzm{\'a}n, Liliana and Vollmer, Anna Maria},
  booktitle    = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {A quality model for actionable analytics in rapid software development},
  year         = {2018},
  organization = {IEEE},
  pages        = {370--377},
  groups       = {phase_start, excluded_doubt},
}

@InProceedings{Tichy2015,
  author    = {Tichy, M. and Bosch, J. and Goedicke, M. and Fitzgerald, B.},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  title     = {2nd {{International Workshop}} on {{Rapid Continuous Software Engineering}} ({{RCoSE}} 2015)},
  year      = {2015},
  month     = may,
  pages     = {993--994},
  volume    = {2},
  abstract  = {Continuous software engineering refers to the organizational capability to develop, release and learn from software in very short rapid cycles, typically hours, days or a very small numbers of weeks. This requires not only agile processes in teams but in the complete research and development organization. Additionally, the technology used in the different development phases, like requirements engineering and system integration, must support the quick development cycles. Finally, automatic live experimentation for different system alternatives enables fast gathering of required data for decision making. The workshop, the second in the series after the first one at ICSE 2014, aims to bring the research communities of the aforementioned areas together to exchange challenges, ideas, and solutions to bring software engineering a step further to being a holistic continuous process. The workshop program is based on eight papers selected in the peer-review process and supplemented by interaction and discussions at the workshop. The topics range from agile methods, continuous software engineering practices to specific techniques, like visualization and testing.},
  doi       = {10.1109/ICSE.2015.343},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\6SL94AQE\\Tichy et al. - 2015 - 2nd International Workshop on Rapid Continuous Sof.pdf:application/pdf},
  groups    = {phase_start, selected},
  issn      = {1558-1225},
  keywords  = {Companies,Conferences,Software,Software engineering,Testing},
  timestamp = {2020-10-29T19:17:48Z},
}

@Article{Hemmati2017,
  author     = {Hemmati, Hadi and Fang, Zhihan and M{\"a}ntyl{\"a}, Mika V. and Adams, Bram},
  journal    = {Software Testing, Verification and Reliability},
  title      = {Prioritizing Manual Test Cases in Rapid Release Environments},
  year       = {2017},
  issn       = {1099-1689},
  number     = {6},
  pages      = {e1609},
  volume     = {27},
  abstract   = {Test case prioritization is an important testing activity, in practice, specially for large scale systems. The goal is to rank the existing test cases in a way that they detect faults as soon as possible, so that any partial execution of the test suite detects the maximum number of defects for the given budget. Test prioritization becomes even more important when the test execution is time consuming, for example, manual system tests versus automated unit tests. Most existing test case prioritization techniques are based on code coverage, which requires access to source code. However, manual testing is mainly performed in a black-box manner (manual testers do not have access to the source code). Therefore, in this paper, the existing test case prioritization techniques (e.g. diversity-based and history-based techniques) are examined and modified to be applicable on manual black-box system testing. An empirical study on four older releases of desktop Firefox showed that none of the techniques were strongly dominating the others in all releases. However, when nine more recent releases of desktop Firefox, where the development has been moved from a traditional to a more agile and rapid release environment, were studied, a very significant difference between the history-based approach and its alternatives was observed. The higher effectiveness of the history-based approach compared with alternatives also held on 28 additional rapid releases of other Firefox projects \textendash{} mobile Firefox and tablet Firefox. The conclusion of the paper is that test cases in rapid release environments can be very effectively prioritized for execution, based on their historical failure knowledge. In particular, it is the recency of historical knowledge that explains its effectiveness in rapid release environments rather than other changes in the process. Copyright \textcopyright{} 2016 John Wiley \& Sons, Ltd.},
  annotation = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/stvr.1609},
  copyright  = {Copyright \textcopyright{} 2016 John Wiley \& Sons, Ltd.},
  doi        = {10.1002/stvr.1609},
  groups     = {phase_start, selected},
  keywords   = {historical data,manual testing,rapid release,test case prioritization,text mining},
  language   = {en},
  timestamp  = {2020-10-29T19:18:50Z},
}

@Article{rochael2015classical,
  author    = {Rochael, Natalia C and Guimar{\~a}es-Costa, Anderson B and Nascimento, Michelle TC and DeSouza-Vieira, Thiago S and Oliveira, Matheus P and e Souza, Luiz F Garcia and Oliveira, Marcus F and Saraiva, Elvira M},
  journal   = {Scientific reports},
  title     = {Classical ROS-dependent and early/rapid ROS-independent release of neutrophil extracellular traps triggered by Leishmania parasites},
  year      = {2015},
  number    = {1},
  pages     = {1--11},
  volume    = {5},
  groups    = {phase_start, excluded_title},
  publisher = {Nature Publishing Group},
}

@Article{brune1994direct,
  author    = {Brune, Martin and Hunter, Jackie L and Corrie, John ET and Webb, Martin R},
  journal   = {Biochemistry},
  title     = {Direct, real-time measurement of rapid inorganic phosphate release using a novel fluorescent probe and its application to actomyosin subfragment 1 ATPase},
  year      = {1994},
  number    = {27},
  pages     = {8262--8271},
  volume    = {33},
  groups    = {phase_start, excluded_title},
  publisher = {ACS Publications},
}

@Article{gerasimenko1998calcium,
  author    = {Gerasimenko, Julia V and Tepikin, Alexei V and Petersen, Ole H and Gerasimenko, Oleg V},
  journal   = {Current Biology},
  title     = {Calcium uptake via endocytosis with rapid release from acidifying endosomes},
  year      = {1998},
  number    = {24},
  pages     = {1335--1338},
  volume    = {8},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@Article{chiang2015rapid,
  author    = {Chiang, Wei-Lun and Lin, Tzu-Tsen and Sureshbabu, Radhakrishnan and Chia, Wei-Tso and Hsiao, Hsu-Chan and Liu, Hung-Yi and Yang, Chih-Man and Sung, Hsing-Wen},
  journal   = {Journal of Controlled Release},
  title     = {A rapid drug release system with a NIR light-activated molecular switch for dual-modality photothermal/antibiotic treatments of subcutaneous abscesses},
  year      = {2015},
  pages     = {53--62},
  volume    = {199},
  groups    = {phase_start, excluded_title},
  publisher = {Elsevier},
}

@InProceedings{zimmermann2019impact,
  author       = {Zimmermann, Th{\'e}o and Art{\'\i}s, Annal{\'\i} Casanueva},
  booktitle    = {2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  title        = {Impact of switching bug trackers: a case study on a medium-sized open source project},
  year         = {2019},
  organization = {IEEE},
  pages        = {13--23},
  groups       = {paper_Costa2018_forward, forward_01, excluded_abstract},
}

@InProceedings{Khalil2019,
  author    = {Khalil, Z. Abou and Constantinou, E. and Mens, T. and Duchien, L. and Quinton, C.},
  booktitle = {2019 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  title     = {A {{Longitudinal Analysis}} of {{Bug Handling Across Eclipse Releases}}},
  year      = {2019},
  month     = sep,
  pages     = {1--12},
  abstract  = {Large open source software projects, like Eclipse, follow a continuous software development process, with a regular release cycle. During each release, new bugs are reported, triaged and resolved. Previous studies have focused on various aspects of bug fixing, such as bug triaging, bug prediction, and bug process analysis. Most studies, however, do not distinguish between what happens before and after each scheduled release. We are also unaware of studies that compare bug fixing activities across different project releases. This paper presents an empirical analysis of the bug handling process of Eclipse over a 15-year period, considering 138K bug reports from Bugzilla, including 16 annual Eclipse releases and two quarterly releases in 2018. We compare the bug resolution rate, the fixing rate, the bug triaging time and the fixing time before and after each release date, and we study the possible impact of "release pressure". Among others, our results reveal that Eclipse bug handling activity is improving over time, with an important decrease in the number of reported bugs before releases, an increase in the bug fixing rate and an increasingly balanced bug handling workload before and after releases. The recent transition from an annual to a quarterly release cycle continued to improve the bug handling process.},
  doi       = {10.1109/ICSME.2019.00010},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\S68UFEYT\\Khalil et al. - 2019 - A Longitudinal Analysis of Bug Handling Across Ecl.pdf:application/pdf},
  groups    = {forward_01, paper_Costa2018_forward, selected},
  issn      = {2576-3148},
  keywords  = {16 annual Eclipse releases,bug fixing rate,bug prediction,bug process analysis,bug resolution rate,bug triaging time,Computer bugs,continuous software development process,Delays,different project releases,Eclipse bug handling activity,empirical analysis; bug fixing process; software maintenance; rapid release cycle; bug triaging; Bugzilla; Releases,History,increasingly balanced bug handling workload,Interviews,open source software projects,program debugging,public domain software,quarterly release cycle,quarterly releases,regular release cycle,release date,release pressure,reported bugs,scheduled release,Software,software fault tolerance,Switches},
  timestamp = {2020-10-29T19:51:19Z},
}

@Article{huang2019empirical,
  author    = {Huang, Yonghui and da Costa, Daniel Alencar and Zhang, Feng and Zou, Ying},
  journal   = {Empirical Software Engineering},
  title     = {An empirical study on the issue reports with questions raised during the issue resolving process},
  year      = {2019},
  number    = {2},
  pages     = {718--750},
  volume    = {24},
  groups    = {forward_01, paper_Costa2018_forward, excluded_abstract},
  publisher = {Springer},
}

@InProceedings{Khalil2019a,
  author    = {Khalil, Z. Abou},
  booktitle = {2019 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  title     = {Studying the {{Impact}} of {{Policy Changes}} on {{Bug Handling Performance}}},
  year      = {2019},
  month     = sep,
  pages     = {590--594},
  abstract  = {The majority of the software development effort is spent on software maintenance. Bug handling constitutes one of the major software maintenance activities. Earlier studies have empirically investigated various aspects of bug handling, such as bug triaging, bug fixing, and bug process analysis. However, results from previous studies may not be applicable to contemporary agile software development practices.Moreover, these studies did not investigate how changes in the development policies and supporting tools impact the bug handling process. Therefore, our main goal is to investigate the impact of such changes on the bug handling process performance. To do so, we are conducting empirical studies on large and long-lived open source software projects. We report on our current research findings and outline the ongoing Ph.D. research project of the first author.},
  doi       = {10.1109/ICSME.2019.00093},
  groups    = {forward_01, paper_Costa2018_forward, selected},
  issn      = {2576-3148},
  keywords  = {agile software development practices,bug fixing,bug handling process performance,bug tracker; empirical analysis; bug fixing process; software maintenance; rapid release cycle; bug triaging; Bugzilla,bug triaging,Computer bugs,Delays,development policies,open source software projects,policy changes,program debugging,project management,public domain software,Schedules,software development effort,software development management,software maintenance,Software maintenance,software maintenance activities,Tools},
  timestamp = {2020-10-29T19:54:15Z},
}

@Article{LUO2019,
  author     = {LUO, Dan and Fang, Yulin and Song, Peijian and Wang, Chong (Alex)},
  journal    = {ICIS 2019 Proceedings},
  title      = {The {{Impact}} of {{Digital Platform Rapid Release Strategy}} on {{App Update Behavior}}: {{An Empirical Study}} of {{Firefox}}},
  year       = {2019},
  month      = nov,
  groups     = {forward_01, paper_Costa2018_forward, selected},
  shorttitle = {The {{Impact}} of {{Digital Platform Rapid Release Strategy}} on {{App Update Behavior}}},
  timestamp  = {2020-10-29T19:55:33Z},
}

@Article{biesialska2020big,
  author    = {Biesialska, Katarzyna and Franch, Xavier and Munt{\'e}s-Mulero, Victor},
  journal   = {Information and Software Technology},
  title     = {Big Data analytics in Agile software development: A systematic mapping study},
  year      = {2020},
  pages     = {106448},
  groups    = {forward_01, paper_Costa2018_forward, excluded_doubt},
  publisher = {Elsevier},
}

@PhdThesis{zimmermann2019challenges,
  author = {Zimmermann, Th{\'e}o},
  school = {Universit{\'e} de Paris},
  title  = {Challenges in the collaborative evolution of a proof language and its ecosystem},
  year   = {2019},
  groups = {forward_01, paper_Costa2018_forward, excluded_abstract},
}

@PhdThesis{el2019leveraging,
  author = {El Mezouar, Mariam},
  title  = {Leveraging the Social Knowledge of Software Systems to Improve the Development Process},
  year   = {2019},
  groups = {forward_01, paper_Costa2018_forward, excluded_doubt},
}

@InProceedings{martinez2018quality,
  author       = {Mart{\'\i}nez-Fern{\'a}ndez, Silverio and Jedlitschka, Andreas and Guzm{\'a}n, Liliana and Vollmer, Anna Maria},
  booktitle    = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {A quality model for actionable analytics in rapid software development},
  year         = {2018},
  organization = {IEEE},
  pages        = {370--377},
  groups       = {forward_01, paper_Lopez2018_forward, excluded_doubt},
}

@InProceedings{kamei2016defect,
  author       = {Kamei, Yasutaka and Shihab, Emad},
  booktitle    = {2016 IEEE 23rd international conference on software analysis, evolution, and reengineering (SANER)},
  title        = {Defect prediction: Accomplishments and future challenges},
  year         = {2016},
  organization = {IEEE},
  pages        = {33--45},
  volume       = {5},
  groups       = {forward_01, paper_Khomh2015_forward, excluded_abstract},
}

@InProceedings{laghari2016fine,
  author    = {Laghari, Gulsher and Murgia, Alessandro and Demeyer, Serge},
  booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
  title     = {Fine-tuning spectrum based fault localisation with frequent method item sets},
  year      = {2016},
  pages     = {274--285},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
}

@Article{Karvonen2017,
  author    = {Karvonen, Teemu and Behutiye, Woubshet and Oivo, Markku and Kuvaja, Pasi},
  journal   = {Information and Software Technology},
  title     = {Systematic Literature Review on the Impacts of Agile Release Engineering Practices},
  year      = {2017},
  issn      = {0950-5849},
  month     = jun,
  pages     = {87--100},
  volume    = {86},
  abstract  = {Context Agile release engineering (ARE) practices are designed to deliver software faster and cheaper to end users; hence, claims of such impacts should be validated by rigorous and relevant empirical studies. Objective The study objective was to analyze both direct and indirect impacts of ARE practices as well as to determine how they have been empirically studied. Method The study applied the systematic literature review research method. ARE practices were identified in empirical studies by searching articles for ``rapid release,'' ``continuous integration,'' ``continuous delivery,'' and ``continuous deployment.'' We systematically analyzed 619 articles and selected 71 primary studies for deeper investigation. The impacts of ARE practices were analyzed from three viewpoints: impacts associated with adoption of the practice, prevalence of the practice, and success of software development. Results The results indicated that ARE practices can create shorter lead times and better communication within and between development teams. However, challenges and drawbacks were also found in change management, software quality assurance, and stakeholder acceptance. The analysis revealed that 33 out of 71 primary studies were casual experience reports that had neither an explicit research method nor a data collection approach specified, and 23 out of 38 empirical studies applied qualitative methods, such as interviews, among practitioners. Additionally, 12 studies applied quantitative methods, such as mining of software repositories. Only three empirical studies combined these research approaches. Conclusion ARE practices can contribute to improved efficiency of the development process. Moreover, release stakeholders can develop a better understanding of the software project's status. Future empirical studies should consider the comprehensive reporting of the context and how the practice is implemented instead of merely referring to usage of the practice. In addition, different stakeholder points of view, such as customer perceptions regarding ARE practices, still clearly require further research.},
  doi       = {10.1016/j.infsof.2017.01.009},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  keywords  = {Agile,Continuous delivery,Continuous deployment,Continuous integration,Rapid release,Release engineering},
  language  = {en},
  timestamp = {2020-10-29T20:36:40Z},
}

@Article{Lin2017,
  author    = {Lin, Dayi and Bezemer, Cor-Paul and Hassan, Ahmed E.},
  journal   = {Empirical Software Engineering},
  title     = {Studying the Urgent Updates of Popular Games on the {{Steam}} Platform},
  year      = {2017},
  issn      = {1573-7616},
  month     = aug,
  number    = {4},
  pages     = {2095--2126},
  volume    = {22},
  abstract  = {The steadily increasing popularity of computer games has led to the rise of a multi-billion dollar industry. This increasing popularity is partly enabled by online digital distribution platforms for games, such as Steam. These platforms offer an insight into the development and test processes of game developers. In particular, we can extract the update cycle of a game and study what makes developers deviate from that cycle by releasing so-called urgent updates. An urgent update is a software update that fixes problems that are deemed critical enough to not be left unfixed until a regular-cycle update. Urgent updates are made in a state of emergency and outside the regular development and test timelines which causes unnecessary stress on the development team. Hence, avoiding the need for an urgent update is important for game developers. We define urgent updates as 0-day updates (updates that are released on the same day), updates that are released faster than the regular cycle, or self-admitted hotfixes. We conduct an empirical study of the urgent updates of the 50 most popular games from Steam, the dominant digital game delivery platform. As urgent updates are reflections of mistakes in the development and test processes, a better understanding of urgent updates can in turn stimulate the improvement of these processes, and eventually save resources for game developers. In this paper, we argue that the update strategy that is chosen by a game developer affects the number of urgent updates that are released. Although the choice of update strategy does not appear to have an impact on the percentage of updates that are released faster than the regular cycle or self-admitted hotfixes, games that use a frequent update strategy tend to have a higher proportion of 0-day updates than games that use a traditional update strategy.},
  doi       = {10.1007/s10664-016-9480-2},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  language  = {en},
  timestamp = {2020-10-29T20:38:00Z},
}

@Article{landman2016empirical,
  author    = {Landman, Davy and Serebrenik, Alexander and Bouwers, Eric and Vinju, Jurgen J},
  journal   = {Journal of Software: Evolution and Process},
  title     = {Empirical analysis of the relationship between CC and SLOC in a large corpus of Java methods and C functions},
  year      = {2016},
  number    = {7},
  pages     = {589--618},
  volume    = {28},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  publisher = {Wiley Online Library},
}

@Article{hassan2017empirical,
  author    = {Hassan, Safwat and Shang, Weiyi and Hassan, Ahmed E},
  journal   = {Empirical Software Engineering},
  title     = {An empirical study of emergency updates for top android mobile apps},
  year      = {2017},
  number    = {1},
  pages     = {505--546},
  volume    = {22},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  publisher = {Springer},
}

@InProceedings{Claes2018,
  author    = {Claes, Ma{\"e}lick and M{\"a}ntyl{\"a}, Mika V. and Kuutila, Miikka and Adams, Bram},
  booktitle = {Proceedings of the 40th {{International Conference}} on {{Software Engineering}}},
  title     = {Do Programmers Work at Night or during the Weekend?},
  year      = {2018},
  address   = {{New York, NY, USA}},
  month     = may,
  pages     = {705--715},
  publisher = {{Association for Computing Machinery}},
  series    = {{{ICSE}} '18},
  abstract  = {Abnormal working hours can reduce work health, general well-being, and productivity, independent from a profession. To inform future approaches for automatic stress and overload detection, this paper establishes empirically collected measures of the work patterns of software engineers. To this aim, we perform the first large-scale study of software engineers' working hours by investigating the time stamps of commit activities of 86 large open source software projects, both containing hired and volunteer developers. We find that two thirds of software engineers mainly follow typical office hours, empirically established to be from 10h to 18h, and do not usually work during nights and weekends. Large variations between projects and individuals exist. Surprisingly, we found no support that project maturation would decrease abnormal working hours. In the Firefox case study, we found that hired developers work more during office hours while seniority, either in terms of number of commits or job status, did not impact working hours. We conclude that the use of working hours or timestamps of work products for stress detection requires establishing baselines at the level of individuals.},
  doi       = {10.1145/3180155.3180193},
  file      = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\X8UX676Z\\Claes et al. - 2018 - Do programmers work at night or during the weekend.pdf:application/pdf},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  isbn      = {978-1-4503-5638-1},
  timestamp = {2020-10-29T20:42:37Z},
}

@Article{Yamashita2016,
  author     = {Yamashita, Kazuhiro and Kamei, Yasutaka and McIntosh, Shane and Hassan, Ahmed E. and Ubayashi, Naoyasu},
  journal    = {Journal of Information Processing},
  title      = {Magnet or {{Sticky}}? {{Measuring Project Characteristics}} from the {{Perspective}} of {{Developer Attraction}} and {{Retention}}},
  year       = {2016},
  number     = {2},
  pages      = {339--348},
  volume     = {24},
  abstract   = {Open Source Software (OSS) is vital to both end users and enterprises. As OSS systems are becoming a type of infrastructure, long-term OSS projects are desired. For the survival of OSS projects, the projects need to not only retain existing developers, but also attract new developers to grow. To better understand how projects retain and attract contributors, our preliminary study aimed to measure the personnel attraction and retention of OSS projects using a pair of population migration metrics, called Magnet (personnel attraction) and Sticky (retention) metrics. Because the preliminary study analyzed only 90 projects and the 90 projects are not representative of GitHub, this paper extend the preliminary study to better understand the generalizability of the results by analyzing 16, 552 projects of GitHub. Furthermore, we also add a pilot study to investigate the typical duration between releases to find more appropriate release duration. The study results show that (1) approximately 23\% of developers remain in the same projects that the developers contribute to, (2) the larger projects are likely to attract and retain more developers, (3) 53\% of terminal projects eventually decay to a state of fewer than ten developers and (4) 55\% of attractive projects remain in an attractive category.},
  doi        = {10.2197/ipsjjip.24.339},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\QJK2ZQFE\\Yamashita et al. - 2016 - Magnet or Sticky Measuring Project Characteristic.pdf:application/pdf},
  groups     = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  keywords   = {Developer Transition,Magnet,Mining Software Repositories,Open Source Software,Sticky},
  shorttitle = {Magnet or {{Sticky}}?},
  timestamp  = {2020-10-29T20:44:34Z},
}

@InProceedings{Vassallo2018,
  author     = {Vassallo, Carmine and Palomba, Fabio and Bacchelli, Alberto and Gall, Harald C.},
  booktitle  = {Proceedings of the 33rd {{ACM}}/{{IEEE International Conference}} on {{Automated Software Engineering}}},
  title      = {Continuous Code Quality: Are We (Really) Doing That?},
  year       = {2018},
  address    = {{New York, NY, USA}},
  month      = sep,
  pages      = {790--795},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{ASE}} 2018},
  abstract   = {Continuous Integration (CI) is a software engineering practice where developers constantly integrate their changes to a project through an automated build process. The goal of CI is to provide developers with prompt feedback on several quality dimensions after each change. Indeed, previous studies provided empirical evidence on a positive association between properly following CI principles and source code quality. A core principle behind CI is Continuous Code Quality (also known as CCQ, which includes automated testing and automated code inspection) may appear simple and effective, yet we know little about its practical adoption. In this paper, we propose a preliminary empirical investigation aimed at understanding how rigorously practitioners follow CCQ. Our study reveals a strong dichotomy between theory and practice: developers do not perform continuous inspection but rather control for quality only at the end of a sprint and most of the times only on the release branch. Preprint [https://doi.org/10.5281/zenodo.1341036]. Data and Materials [http://doi.org/10.5281/zenodo.1341015].},
  doi        = {10.1145/3238147.3240729},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\5QL57AU4\\Vassallo et al. - 2018 - Continuous code quality are we (really) doing tha.pdf:application/pdf},
  groups     = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  isbn       = {978-1-4503-5937-5},
  keywords   = {Code Quality,Continuous Integration,Empirical Studies},
  shorttitle = {Continuous Code Quality},
  timestamp  = {2020-10-29T20:46:23Z},
}

@Article{soetens2017changes,
  author    = {Soetens, Quinten David and Robbes, Romain and Demeyer, Serge},
  journal   = {ACM Computing Surveys (CSUR)},
  title     = {Changes as first-class citizens: A research perspective on modern software tooling},
  year      = {2017},
  number    = {2},
  pages     = {1--38},
  volume    = {50},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  publisher = {ACM New York, NY, USA},
}

@InProceedings{Claes2017a,
  author     = {Claes, M. and M{\"a}ntyl{\"a}, M. and Kuutila, M. and Adams, B.},
  booktitle  = {2017 {{IEEE}}/{{ACM}} 14th {{International Conference}} on {{Mining Software Repositories}} ({{MSR}})},
  title      = {Abnormal {{Working Hours}}: {{Effect}} of {{Rapid Releases}} and {{Implications}} to {{Work Content}}},
  year       = {2017},
  month      = may,
  pages      = {243--247},
  abstract   = {During the past years, overload at work leading to psychological diseases, such as burnouts, have drawn more public attention. This paper is a preliminary step toward an analysis of the work patterns and possible indicators of overload and time pressure on software developers with mining software repositories approach. We explore the working pattern of developers in the context of Mozilla Firefox, a large and long-lived open source project. To that end we investigate the impact of the move from traditional to rapid release cycle on work pattern. Moreover we compare Mozilla Firefox work pattern with another Mozilla product, Firefox OS, which has a different release cycle than Firefox. We find that both projects exhibit healthy working patterns, i.e. lower activity during the weekends and outside of office hours. Firefox experiences proportionally more activity on weekends than Firefox OS (Cohen's d = 0.94). We find that switching to rapid releases has reduced weekend work (Cohen's d = 1.43) and working during the night (Cohen's d = 0.45). This result holds even when we limit the analyzes on the hired resources, i.e. considering only individuals with Mozilla foundation email address, although, the effect sizes are smaller for weekends (Cohen's d = 0.64) and nights (Cohen's d = 0.23). Moreover, we use dissimilarity word clouds and find that work during the weekend is more technical while work during the week expresses more positive sentiment with words like "good" and "nice". Our results suggest that moving to rapid releases have positive impact on the work health and work-life-balance of software engineers. However, caution is needed as our results are based on a limited set of quantitative data from a single organization.},
  doi        = {10.1109/MSR.2017.3},
  groups     = {forward_01, paper_Khomh2015_forward, selected},
  keywords   = {abnormal working hours,bugzilla,burnouts,Computer bugs,Data mining,diseases,Diseases,dissimilarity word clouds,Electronic mail,empirical software engineering,firefox,Firefox OS,human factors,mozilla,Mozilla Firefox work pattern,open source project,psychological diseases,psychology,Psychology,public domain software,rapid releases,release,Software,software developers,software engineer work health,software engineer work-life-balance,software engineering,software repositories approach,Switches,time pressure,weekend,work content,working pattern},
  shorttitle = {Abnormal {{Working Hours}}},
  timestamp  = {2020-10-29T20:49:21Z},
}

@InProceedings{rahman2018impact,
  author    = {Rahman, Md Tajmilur and Rigby, Peter C},
  booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  title     = {The impact of failing, flaky, and high failure tests on the number of crash reports associated with Firefox builds},
  year      = {2018},
  pages     = {857--862},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
}

@InProceedings{an2015empirical,
  author       = {An, Le and Khomh, Foutse},
  booktitle    = {2015 IEEE International Conference on Software Quality, Reliability and Security},
  title        = {An Empirical Study of Highly Impactful Bugs in Mozilla Projects},
  year         = {2015},
  organization = {IEEE},
  pages        = {262--271},
  groups       = {forward_01, paper_Khomh2015_forward, excluded_abstract},
}

@Article{teixeira2019managing,
  author    = {Teixeira, Jos{\'e} Apolin{\'a}rio and Karsten, Helena},
  journal   = {Journal of Internet Services and Applications},
  title     = {Managing to release early, often and on time in the OpenStack software ecosystem},
  year      = {2019},
  number    = {1},
  pages     = {7},
  volume    = {10},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  publisher = {Springer},
}

@InProceedings{ruohonen2016software,
  author       = {Ruohonen, Jukka and Hyrynsalmi, Sami and Lepp{\"a}nen, Ville},
  booktitle    = {International Conference on Advanced Information Systems Engineering},
  title        = {Software Vulnerability Life Cycles and the Age of Software Products: An Empirical Assertion with Operating System Products},
  year         = {2016},
  organization = {Springer},
  pages        = {207--218},
  groups       = {forward_01, paper_Khomh2015_forward, excluded_abstract},
}

@PhdThesis{Poo-Caamano2016,
  author     = {{Poo-Caama{\~n}o}, Germ{\'a}n},
  title      = {Release Management in Free and Open Source Software Ecosystems},
  year       = {2016},
  type       = {Thesis},
  abstract   = {Releasing software is challenging. To decide when to release software, developers may  consider a deadline, a set of features or quality attributes. Yet, there are many stories of  software that is not released on time. In large-scale software development, release management  requires significant communication and coordination. It is particularly challenging  in Free and Open Source Software (FOSS) ecosystems, in which hundreds of loosely connected  developers and their projects are coordinated for releasing software according to a  schedule.  In this work, we investigate the release management process in two large-scale FOSS  development projects. In particular, our focus is the communication in the whole release  management process in each ecosystem across multiple releases. The main research questions  addressed in this dissertation are: (1) How do developers in these FOSS ecosystems  communicate and coordinate to build and release a common product based on different  projects? (2) What are the release management tasks in a FOSS ecosystem? and (3) What  are the challenges that release managers face in a FOSS ecosystem?  To understand this process and its challenges better, we used a multiple case study  methodology, and colleced evidence from a combination of the following sources: documents,  archival records, interviews, direct observation, participant observation, and physical  artifacts. We conducted the case studies on two FLOSS software ecosystems: GNOME  and OpenStack. We analyzed over two and half years of communication in each ecosystem  and studied developers' interactions. GNOME is a collection of libraries, system services,  and end-user applications; together, these projects provide a unified desktop \textemdash the GNOME  desktop. OpenStack is a collection of software tools for building and managing cloud computing  platforms for public and private clouds. We catalogued communication channels,  categorized coordination activities in one channel, and triangulated our results by  interviewing key developers identified through social network analysis.  We found factors that impact the release process in a software ecosystem, including a  release schedule positively, influence instead of direct control, and diversity. The release  schedule drives most of the communication within an ecosystem. To achieve a concerted release,  a Release Team helps developers reach technical consensus through influence rather  than direct control. The diverse composition of the Release Team might increase its reach  and influence in the ecosystem. Our results can help organizations build better large-scale  teams and show that software engineering research focused on individual projects might  miss important parts of the picture.  The contributions of this dissertation are: (1) an empirical study of release management  in two FOSS ecosystems (2) a set of lessons learned from the case studies, and (3) a theory  of release management in FOSS ecosystems. We summarize our theory that explains our  understanding of release management in FOSS ecosystems as three statements: (1) the size  and complexity of the integrated product is constrained by the release managers capacity,  (2) release management should be capable of reaching the whole ecosystem, and (3) the  release managers need social and technical skills. The dissertation discusses this theory in  the light of the case studies, other research efforts, and its implications.},
  annotation = {Accepted: 2016-12-02T18:19:44Z},
  copyright  = {Available to the World Wide Web},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\7XAPABBI\\Poo-Caamaño - 2016 - Release management in free and open source softwar.pdf:application/pdf},
  groups     = {forward_01, paper_Khomh2015_forward, excluded_doubt},
  language   = {en},
  timestamp  = {2020-10-29T20:58:39Z},
}

@Article{link2018assessing,
  author = {Link, Georg JP and Germonprez, Matt},
  title  = {Assessing open source project health},
  year   = {2018},
  groups = {forward_01, paper_Khomh2015_forward, excluded_abstract},
}

@Article{abdellatif2020msrbot,
  author    = {Abdellatif, Ahmad and Badran, Khaled and Shihab, Emad},
  journal   = {Empirical Software Engineering},
  title     = {MSRBot: Using bots to answer questions from software repositories},
  year      = {2020},
  pages     = {1--30},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  publisher = {Springer},
}

@Article{Vig2018,
  author    = {Vig, Vidhi and Kaur, Arvinder},
  journal   = {Journal of Intelligent \& Fuzzy Systems},
  title     = {Test Effort Estimation and Prediction of Traditional and Rapid Release Models Using Machine Learning Algorithms},
  year      = {2018},
  issn      = {1064-1246},
  month     = jan,
  number    = {2},
  pages     = {1657--1669},
  volume    = {35},
  abstract  = {Recently, many software companies have shifted to shorter release cycles from the traditional multi-month release cycle. Evolution and transition of release cycles may affect the test effort in the system. This paper analyses 25 traditional releases},
  doi       = {10.3233/JIFS-169703},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  language  = {en},
  publisher = {{IOS Press}},
  timestamp = {2020-10-29T21:04:40Z},
}

@Article{Castelluccio2019,
  author    = {Castelluccio, Marco and An, Le and Khomh, Foutse},
  journal   = {Empirical Software Engineering},
  title     = {An Empirical Study of Patch Uplift in Rapid Release Development Pipelines},
  year      = {2019},
  issn      = {1573-7616},
  month     = oct,
  number    = {5},
  pages     = {3008--3044},
  volume    = {24},
  abstract  = {In rapid release development processes, patches that fix critical issues, or implement high-value features are often promoted directly from the development channel to a stabilization channel, potentially skipping one or more stabilization channels. This practice is called patch uplift. Patch uplift is risky, because patches that are rushed through the stabilization phase can end up introducing regressions in the code. This paper examines patch uplift operations at Mozilla, with the aim to identify the characteristics of the uplifted patches that did not effectively fix the targeted problem and that introduced regressions. Through statistical and manual analyses, a series of problems were investigated, including the reasons behind patch uplift decisions, the root causes of ineffective uplifts, the characteristics of uplifted patches that introduced regressions, and whether these regressions can be prevented. Additionally, three Mozilla release managers were interviewed in order to understand organizational factors that affect patch uplift decisions and outcomes. Results show that most patches are uplifted because of a wrong functionality or a crash. Certain uplifts did not effectively address their problems because they did not completely fix the problems or lead to regressions. Uplifted patches that lead to regressions tend to have larger patch size, and most of the faults are due to semantic or memory errors in the patches. Also, release managers are more inclined to accept patch uplift requests that concern certain specific components, and\textendash or that are submitted by certain specific developers. About 25\% to 30\% of the regressions due to Beta or Release uplifts could have been prevented as they could be reproduced by developers and were found in widely used feature/website/configuration or via telemetry.},
  doi       = {10.1007/s10664-018-9665-y},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  language  = {en},
  timestamp = {2020-10-29T21:06:03Z},
}

@InProceedings{teixeira2017release,
  author       = {Teixeira, Jose},
  booktitle    = {IFIP International Conference on Open Source Systems},
  title        = {Release early, release often and release on time. an empirical case study of release management},
  year         = {2017},
  organization = {Springer, Cham},
  pages        = {167--181},
  groups       = {forward_01, paper_Khomh2015_forward, selected},
}

@InProceedings{Khalil2019,
  author    = {Khalil, Z. Abou and Constantinou, E. and Mens, T. and Duchien, L. and Quinton, C.},
  booktitle = {2019 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  title     = {A {{Longitudinal Analysis}} of {{Bug Handling Across Eclipse Releases}}},
  year      = {2019},
  month     = sep,
  pages     = {1--12},
  abstract  = {Large open source software projects, like Eclipse, follow a continuous software development process, with a regular release cycle. During each release, new bugs are reported, triaged and resolved. Previous studies have focused on various aspects of bug fixing, such as bug triaging, bug prediction, and bug process analysis. Most studies, however, do not distinguish between what happens before and after each scheduled release. We are also unaware of studies that compare bug fixing activities across different project releases. This paper presents an empirical analysis of the bug handling process of Eclipse over a 15-year period, considering 138K bug reports from Bugzilla, including 16 annual Eclipse releases and two quarterly releases in 2018. We compare the bug resolution rate, the fixing rate, the bug triaging time and the fixing time before and after each release date, and we study the possible impact of "release pressure". Among others, our results reveal that Eclipse bug handling activity is improving over time, with an important decrease in the number of reported bugs before releases, an increase in the bug fixing rate and an increasingly balanced bug handling workload before and after releases. The recent transition from an annual to a quarterly release cycle continued to improve the bug handling process.},
  doi       = {10.1109/ICSME.2019.00010},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\S68UFEYT\\Khalil et al. - 2019 - A Longitudinal Analysis of Bug Handling Across Ecl.pdf:application/pdf},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  issn      = {2576-3148},
  keywords  = {16 annual Eclipse releases,bug fixing rate,bug prediction,bug process analysis,bug resolution rate,bug triaging time,Computer bugs,continuous software development process,Delays,different project releases,Eclipse bug handling activity,empirical analysis; bug fixing process; software maintenance; rapid release cycle; bug triaging; Bugzilla; Releases,History,increasingly balanced bug handling workload,Interviews,open source software projects,program debugging,public domain software,quarterly release cycle,quarterly releases,regular release cycle,release date,release pressure,reported bugs,scheduled release,Software,software fault tolerance,Switches},
  timestamp = {2020-10-29T19:51:19Z},
}

@InProceedings{Kula2019,
  author     = {Kula, Elvan and Rastogi, Ayushi and Huijgens, Hennie and van Deursen, Arie and Gousios, Georgios},
  booktitle  = {Proceedings of the 2019 27th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  title      = {Releasing Fast and Slow: An Exploratory Case Study at {{ING}}},
  year       = {2019},
  address    = {{New York, NY, USA}},
  month      = aug,
  pages      = {785--795},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{ESEC}}/{{FSE}} 2019},
  abstract   = {The appeal of delivering new features faster has led many software projects to adopt rapid releases. However, it is not well understood what the effects of this practice are. This paper presents an exploratory case study of rapid releases at ING, a large banking company that develops software solutions in-house, to characterize rapid releases. Since 2011, ING has shifted to a rapid release model. This switch has resulted in a mixed environment of 611 teams releasing relatively fast and slow. We followed a mixed-methods approach in which we conducted a survey with 461 participants and corroborated their perceptions with 2 years of code quality data and 1 year of release delay data. Our research shows that: rapid releases are more commonly delayed than their non-rapid counterparts, however, rapid releases have shorter delays; rapid releases can be beneficial in terms of reviewing and user-perceived quality; rapidly released software tends to have a higher code churn, a higher test coverage and a lower average complexity; challenges in rapid releases are related to managing dependencies and certain code aspects, e.g., design debt.},
  doi        = {10.1145/3338906.3338978},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\5D4URYJ2\\Kula et al. - 2019 - Releasing fast and slow an exploratory case study.pdf:application/pdf},
  groups     = {forward_01, paper_Khomh2015_forward, selected},
  isbn       = {978-1-4503-5572-8},
  keywords   = {rapid release,release delay,software quality,technical debt},
  shorttitle = {Releasing Fast and Slow},
  timestamp  = {2020-10-29T21:10:20Z},
}

@InProceedings{Khalil2019a,
  author    = {Khalil, Z. Abou},
  booktitle = {2019 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  title     = {Studying the {{Impact}} of {{Policy Changes}} on {{Bug Handling Performance}}},
  year      = {2019},
  month     = sep,
  pages     = {590--594},
  abstract  = {The majority of the software development effort is spent on software maintenance. Bug handling constitutes one of the major software maintenance activities. Earlier studies have empirically investigated various aspects of bug handling, such as bug triaging, bug fixing, and bug process analysis. However, results from previous studies may not be applicable to contemporary agile software development practices.Moreover, these studies did not investigate how changes in the development policies and supporting tools impact the bug handling process. Therefore, our main goal is to investigate the impact of such changes on the bug handling process performance. To do so, we are conducting empirical studies on large and long-lived open source software projects. We report on our current research findings and outline the ongoing Ph.D. research project of the first author.},
  doi       = {10.1109/ICSME.2019.00093},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\CXP4QI8S\\Khalil - 2019 - Studying the Impact of Policy Changes on Bug Handl.pdf:application/pdf},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  issn      = {2576-3148},
  keywords  = {agile software development practices,bug fixing,bug handling process performance,bug tracker; empirical analysis; bug fixing process; software maintenance; rapid release cycle; bug triaging; Bugzilla,bug triaging,Computer bugs,Delays,development policies,open source software projects,policy changes,program debugging,project management,public domain software,Schedules,software development effort,software development management,software maintenance,Software maintenance,software maintenance activities,Tools},
  timestamp = {2020-10-29T19:54:15Z},
}

@PhdThesis{An2019,
  author    = {An, Le},
  school    = {Polytechnique Montr\'eal},
  title     = {Understanding the {{Impact}} of {{Release Processes}} and {{Practices}} on {{Software Quality}}},
  year      = {2019},
  month     = apr,
  abstract  = {L'ing\'enierie de production (release engineering) englobe toutes les activit\'es visant \`a \guillemotleft construire un pipeline qui transforme le code source en un produit int\'egr\'e, compil\'e, empaquet\'e, test\'e et sign\'e pr\^et \`a \^etre publier\guillemotright. La strat\'egie des production et les pratiques de publication peuvent avoir un impact sur la qualit\'e d'un produit logiciel. Bien que cet impact ait \'et\'e longuement discut\'e et \'etudi\'e dans la communaut\'e du g\'enie logiciel, il reste encore plusieurs probl\`emes \`a r\'esoudre. Cette th\`ese s'attaque \`a quelque-uns de ces probl\`emes non r\'esoulus de l'ing\'enierie de production en vue de proposer des solutions. En particulier, nous investigons : 1) pourquoi les activit\'es de r\'evision de code (code review) peuvent rater des erreurs de code susceptibles de causer des plantages (crashs); (2) comment pr\'evenir les bogues lors de l'approbation et l'int\'egration des patches urgents; 3) dans un \'ecosyst\`eme logiciel, comment att\'enuer le risque de bogues dus \`a des injections de DLL. Nous avons choisi d'\'etudier ces probl\`emes car ils correspondent \`a trois phases importantes des processus de production de logiciels, c'est-\`a-dire la r\'evision de code, les patches urgents, et la publication de logiciels dans un \'ecosyst\`eme. Les solutions \`a ces probl\`emes peuvent aider les entreprises de logiciels \`a am\'eliorer leur strat\'egie de production et de publication. Ce qui augmentera leur productivit\'e de d\'eveloppement et la qualit\'e g\'en\'erale de leurs produits logiciels.----------ABSTRACT: Release engineering encompasses all the activities aimed at ``building a pipeline that transforms source code into an integrated, compiled, packaged, tested, and signed product that is ready for release''. The strategy of the release processes and practices can impact the quality of a software artefact. Although such impact has been extensively discussed and studied in the software engineering community, there are still many pending issues to resolve. The goal of this thesis is to study and solve some of these pending issues. More specifically, we examine 1) why code review practices can miss crash-prone code; 2) how urgent patches (also called patch uplift) are approved to release and how to prevent regressions due to urgent patches; 3) in a software ecosystem, how to mitigate the risk of defects due to DLL injections. We chose to study these problems because they correspond to three important phases of software release processes, i.e., code review, patch uplift, and releasing software in an ecosystem. The solutions of these problems can help software organizations improve their release strategy; increasing their development productivity and the overall user-perceived quality of their products.},
  groups    = {forward_01, paper_Khomh2015_forward, selected},
  language  = {en},
  timestamp = {2020-10-29T21:16:32Z},
}

@PhdThesis{Lin2019,
  author     = {Lin, Dayi},
  title      = {How {{Can Game Developers Leverage Data}} from {{Online Distribution Platforms}}? {{A Case Study}} of the {{Steam Platform}}},
  year       = {2019},
  month      = jan,
  type       = {Thesis},
  abstract   = {Developing a successful game is challenging. Prior work shows that gamers are extremely difficult to satisfy, making the quality of games an important issue. Prior work has yielded important results from mining data that is available on the online distribution platforms for software applications, helping practitioners save valuable resources, and improving the user-perceived quality of software that is distributed through these platforms. However, much of the work on mining online distribution platforms focuses on mining mobile app stores (e.g., Google Play Store, Apple App Store). Video game development differs from the development of other types of software. Hence, knowledge derived from mining mobile app stores may not be directly applicable to game development.    In this Ph.D. thesis, we focused on mining online distribution platforms for games. In particular, we mined data from the Steam platform, the largest digital distribution platforms for PC gaming, with over 23,000 games available and over 184 million active users. More specifically, we analyzed the following four aspects of online distribution for games: urgent updates; the early access model (which enables game developers to sell unfinished versions of their games); user reviews; and user-recorded gameplay videos on the Steam platform. We observed that the choice of update strategy is associated with the proportion of urgent updates that developers have to release. Early access game developers can use the early access model as a method for eliciting early feedback and more positive reviews to attract additional new players. In addition, although negative reviews contain more valuable information for developers, the portion of useful information in positive reviews should not be ignored by developers and researchers. Finally, we proposed an approach for determining the likelihood that a gameplay video demonstrates a game bug, with both a mean average precision at 10 and a mean average precision at 100 of 0.91. Our approach can help game developers leverage readily available gameplay videos to automatically collect otherwise hard-to-gather bug reports for games. The results of our empirical studies highlight the value of mining online distribution platforms for games in offering practical suggestions for game developers.},
  annotation = {Accepted: 2019-01-17T18:33:21Z},
  copyright  = {Queen's University's Thesis/Dissertation Non-Exclusive License for Deposit to QSpace and Library and Archives Canada},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\D2522ERT\\Lin - 2019 - How Can Game Developers Leverage Data from Online .pdf:application/pdf},
  groups     = {forward_01, paper_Khomh2015_forward, excluded_doubt},
  language   = {eng},
  shorttitle = {How {{Can Game Developers Leverage Data}} from {{Online Distribution Platforms}}?},
  timestamp  = {2020-10-29T21:20:41Z},
}

@InProceedings{Vassallo2019,
  author    = {Vassallo, C.},
  booktitle = {2019 34th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  title     = {Enabling {{Continuous Improvement}} of a {{Continuous Integration Process}}},
  year      = {2019},
  month     = nov,
  pages     = {1246--1249},
  abstract  = {Continuous Integration (CI) is a widely-adopted software engineering practice. Despite its undisputed benefits, like higher software quality and improved developer productivity, mastering CI is not easy. Among the several barriers when transitioning to CI, developers need to face a new type of software failures (i.e., build failures) that requires them to understand complex build logs. Even when a team has successfully introduced a CI culture, living up to its principles and improving the CI practice are also challenging. In my research, I want to provide developers with the right support for establishing CI and the proper recommendations for continuously improving their CI process.},
  doi       = {10.1109/ASE.2019.00151},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\2FPNW5PH\\Vassallo - 2019 - Enabling Continuous Improvement of a Continuous In.pdf:application/pdf},
  groups    = {forward_01, paper_Khomh2015_forward, excluded_abstract},
  issn      = {2643-1572},
  keywords  = {Best practices,build failures,CI culture,CI practice,CI process,complex build logs,continuous improvement,continuous integration process,Continuous Integration; Build Failures; Anti patterns; Best Practices,developer productivity,Measurement,Organizations,Software,software engineering practice,software failures,software quality,Taxonomy,Testing,Tools,undisputed benefits},
  timestamp = {2020-10-29T21:22:42Z},
}

@Article{LUO2019,
  author     = {LUO, Dan and Fang, Yulin and Song, Peijian and Wang, Chong (Alex)},
  journal    = {ICIS 2019 Proceedings},
  title      = {The {{Impact}} of {{Digital Platform Rapid Release Strategy}} on {{App Update Behavior}}: {{An Empirical Study}} of {{Firefox}}},
  year       = {2019},
  month      = nov,
  groups     = {forward_01, paper_Khomh2015_forward, selected},
  shorttitle = {The {{Impact}} of {{Digital Platform Rapid Release Strategy}} on {{App Update Behavior}}},
  timestamp  = {2020-10-29T19:55:33Z},
}

@Article{chennappan2017autocorrelation,
  author = {Chennappan, R. and Vidyaa Thulasiraman},
  title  = AUTOCORRELATION #{WEIGHTEDSUMENTROPYBASEDSOFTWAREQUALITYMANAGEMENTFOROPENSOURCEAPPLICATION, journal = International Journal of Advanced Research in Computer Science 8},
  year   = {2017},
  volume = {8},
  groups = {forward_01, paper_Khomh2015_forward, excluded_title},
}

@Book{frank2017,
  author = {Frank, Ferdinand},
  title  = {Activity of Core and Peripheral Developers: A Case Study on Mozilla Firefox},
  year   = {2017},
  groups = {paper_Khomh2015_forward},
}

@Book{frank2017,
  author = {Frank, Ferdinand},
  title  = {Activity of Core and Peripheral Developers: A Case Study on Mozilla Firefox},
  year   = {2017},
  groups = {paper_Khomh2015_forward, forward_01, excluded_doubt},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:selected\;0\;0\;0x8a8a8aff\;\;\;;
1 StaticGroup:excluded\;2\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:excluded_title\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:excluded_abstract\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:excluded_doubt\;0\;0\;0x8a8a8aff\;\;\;;
1 StaticGroup:phase\;2\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:phase_start\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:forward_01\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:paper\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:paper_Costa2018_forward\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:paper_Lopez2018_forward\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:paper_Guzman2017_forward\;0\;1\;0x8a8a8aff\;\;\;;
2 StaticGroup:paper_Khomh2015_forward\;0\;1\;0x8a8a8aff\;\;\;;
}
