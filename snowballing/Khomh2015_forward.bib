
@MastersThesis{,
  author = {National Central University},
  school = {National Central University},
  title  = {"結合本體論與模糊分析網路程序法於軟體測試之風險與風險關聯辨識.},
  year   = {2017.},
  groups = {forward_01, excluded_language, p_Khomh2015_forward},
}

@PhdThesis{An2019,
  author    = {An, Le},
  school    = {Polytechnique Montr\'eal},
  title     = {Understanding the {{Impact}} of {{Release Processes}} and {{Practices}} on {{Software Quality}}},
  year      = {2019},
  month     = apr,
  abstract  = {L'ing\'enierie de production (release engineering) englobe toutes les activit\'es visant \`a \guillemotleft construire un pipeline qui transforme le code source en un produit int\'egr\'e, compil\'e, empaquet\'e, test\'e et sign\'e pr\^et \`a \^etre publier\guillemotright. La strat\'egie des production et les pratiques de publication peuvent avoir un impact sur la qualit\'e d'un produit logiciel. Bien que cet impact ait \'et\'e longuement discut\'e et \'etudi\'e dans la communaut\'e du g\'enie logiciel, il reste encore plusieurs probl\`emes \`a r\'esoudre. Cette th\`ese s'attaque \`a quelque-uns de ces probl\`emes non r\'esoulus de l'ing\'enierie de production en vue de proposer des solutions. En particulier, nous investigons : 1) pourquoi les activit\'es de r\'evision de code (code review) peuvent rater des erreurs de code susceptibles de causer des plantages (crashs); (2) comment pr\'evenir les bogues lors de l'approbation et l'int\'egration des patches urgents; 3) dans un \'ecosyst\`eme logiciel, comment att\'enuer le risque de bogues dus \`a des injections de DLL. Nous avons choisi d'\'etudier ces probl\`emes car ils correspondent \`a trois phases importantes des processus de production de logiciels, c'est-\`a-dire la r\'evision de code, les patches urgents, et la publication de logiciels dans un \'ecosyst\`eme. Les solutions \`a ces probl\`emes peuvent aider les entreprises de logiciels \`a am\'eliorer leur strat\'egie de production et de publication. Ce qui augmentera leur productivit\'e de d\'eveloppement et la qualit\'e g\'en\'erale de leurs produits logiciels.----------ABSTRACT: Release engineering encompasses all the activities aimed at ``building a pipeline that transforms source code into an integrated, compiled, packaged, tested, and signed product that is ready for release''. The strategy of the release processes and practices can impact the quality of a software artefact. Although such impact has been extensively discussed and studied in the software engineering community, there are still many pending issues to resolve. The goal of this thesis is to study and solve some of these pending issues. More specifically, we examine 1) why code review practices can miss crash-prone code; 2) how urgent patches (also called patch uplift) are approved to release and how to prevent regressions due to urgent patches; 3) in a software ecosystem, how to mitigate the risk of defects due to DLL injections. We chose to study these problems because they correspond to three important phases of software release processes, i.e., code review, patch uplift, and releasing software in an ecosystem. The solutions of these problems can help software organizations improve their release strategy; increasing their development productivity and the overall user-perceived quality of their products.},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  language  = {en},
  timestamp = {2020-10-29T21:16:32Z},
}

@Article{Castelluccio2019,
  author    = {Castelluccio, Marco and An, Le and Khomh, Foutse},
  journal   = {Empirical Software Engineering},
  title     = {An Empirical Study of Patch Uplift in Rapid Release Development Pipelines},
  year      = {2019},
  issn      = {1573-7616},
  month     = oct,
  number    = {5},
  pages     = {3008--3044},
  volume    = {24},
  abstract  = {In rapid release development processes, patches that fix critical issues, or implement high-value features are often promoted directly from the development channel to a stabilization channel, potentially skipping one or more stabilization channels. This practice is called patch uplift. Patch uplift is risky, because patches that are rushed through the stabilization phase can end up introducing regressions in the code. This paper examines patch uplift operations at Mozilla, with the aim to identify the characteristics of the uplifted patches that did not effectively fix the targeted problem and that introduced regressions. Through statistical and manual analyses, a series of problems were investigated, including the reasons behind patch uplift decisions, the root causes of ineffective uplifts, the characteristics of uplifted patches that introduced regressions, and whether these regressions can be prevented. Additionally, three Mozilla release managers were interviewed in order to understand organizational factors that affect patch uplift decisions and outcomes. Results show that most patches are uplifted because of a wrong functionality or a crash. Certain uplifts did not effectively address their problems because they did not completely fix the problems or lead to regressions. Uplifted patches that lead to regressions tend to have larger patch size, and most of the faults are due to semantic or memory errors in the patches. Also, release managers are more inclined to accept patch uplift requests that concern certain specific components, and\textendash or that are submitted by certain specific developers. About 25\% to 30\% of the regressions due to Beta or Release uplifts could have been prevented as they could be reproduced by developers and were found in widely used feature/website/configuration or via telemetry.},
  doi       = {10.1007/s10664-018-9665-y},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  language  = {en},
  timestamp = {2020-10-29T21:06:03Z},
}

@InProceedings{Claes2017a,
  author     = {Claes, M. and M{\"a}ntyl{\"a}, M. and Kuutila, M. and Adams, B.},
  booktitle  = {2017 {{IEEE}}/{{ACM}} 14th {{International Conference}} on {{Mining Software Repositories}} ({{MSR}})},
  title      = {Abnormal {{Working Hours}}: {{Effect}} of {{Rapid Releases}} and {{Implications}} to {{Work Content}}},
  year       = {2017},
  month      = may,
  pages      = {243--247},
  abstract   = {During the past years, overload at work leading to psychological diseases, such as burnouts, have drawn more public attention. This paper is a preliminary step toward an analysis of the work patterns and possible indicators of overload and time pressure on software developers with mining software repositories approach. We explore the working pattern of developers in the context of Mozilla Firefox, a large and long-lived open source project. To that end we investigate the impact of the move from traditional to rapid release cycle on work pattern. Moreover we compare Mozilla Firefox work pattern with another Mozilla product, Firefox OS, which has a different release cycle than Firefox. We find that both projects exhibit healthy working patterns, i.e. lower activity during the weekends and outside of office hours. Firefox experiences proportionally more activity on weekends than Firefox OS (Cohen's d = 0.94). We find that switching to rapid releases has reduced weekend work (Cohen's d = 1.43) and working during the night (Cohen's d = 0.45). This result holds even when we limit the analyzes on the hired resources, i.e. considering only individuals with Mozilla foundation email address, although, the effect sizes are smaller for weekends (Cohen's d = 0.64) and nights (Cohen's d = 0.23). Moreover, we use dissimilarity word clouds and find that work during the weekend is more technical while work during the week expresses more positive sentiment with words like "good" and "nice". Our results suggest that moving to rapid releases have positive impact on the work health and work-life-balance of software engineers. However, caution is needed as our results are based on a limited set of quantitative data from a single organization.},
  doi        = {10.1109/MSR.2017.3},
  groups     = {forward_01, selected, p_Khomh2015_forward},
  keywords   = {abnormal working hours,bugzilla,burnouts,Computer bugs,Data mining,diseases,Diseases,dissimilarity word clouds,Electronic mail,empirical software engineering,firefox,Firefox OS,human factors,mozilla,Mozilla Firefox work pattern,open source project,psychological diseases,psychology,Psychology,public domain software,rapid releases,release,Software,software developers,software engineer work health,software engineer work-life-balance,software engineering,software repositories approach,Switches,time pressure,weekend,work content,working pattern},
  shorttitle = {Abnormal {{Working Hours}}},
  timestamp  = {2020-10-29T20:49:21Z},
}

@InProceedings{Claes2018,
  author    = {Claes, Ma{\"e}lick and M{\"a}ntyl{\"a}, Mika V. and Kuutila, Miikka and Adams, Bram},
  booktitle = {Proceedings of the 40th {{International Conference}} on {{Software Engineering}}},
  title     = {Do Programmers Work at Night or during the Weekend?},
  year      = {2018},
  address   = {{New York, NY, USA}},
  month     = may,
  pages     = {705--715},
  publisher = {{Association for Computing Machinery}},
  series    = {{{ICSE}} '18},
  abstract  = {Abnormal working hours can reduce work health, general well-being, and productivity, independent from a profession. To inform future approaches for automatic stress and overload detection, this paper establishes empirically collected measures of the work patterns of software engineers. To this aim, we perform the first large-scale study of software engineers' working hours by investigating the time stamps of commit activities of 86 large open source software projects, both containing hired and volunteer developers. We find that two thirds of software engineers mainly follow typical office hours, empirically established to be from 10h to 18h, and do not usually work during nights and weekends. Large variations between projects and individuals exist. Surprisingly, we found no support that project maturation would decrease abnormal working hours. In the Firefox case study, we found that hired developers work more during office hours while seniority, either in terms of number of commits or job status, did not impact working hours. We conclude that the use of working hours or timestamps of work products for stress detection requires establishing baselines at the level of individuals.},
  doi       = {10.1145/3180155.3180193},
  file      = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\X8UX676Z\\Claes et al. - 2018 - Do programmers work at night or during the weekend.pdf:application/pdf},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
  isbn      = {978-1-4503-5638-1},
  timestamp = {2020-10-29T20:42:37Z},
}

@Article{Karvonen2017,
  author    = {Karvonen, Teemu and Behutiye, Woubshet and Oivo, Markku and Kuvaja, Pasi},
  journal   = {Information and Software Technology},
  title     = {Systematic Literature Review on the Impacts of Agile Release Engineering Practices},
  year      = {2017},
  issn      = {0950-5849},
  month     = jun,
  pages     = {87--100},
  volume    = {86},
  abstract  = {Context Agile release engineering (ARE) practices are designed to deliver software faster and cheaper to end users; hence, claims of such impacts should be validated by rigorous and relevant empirical studies. Objective The study objective was to analyze both direct and indirect impacts of ARE practices as well as to determine how they have been empirically studied. Method The study applied the systematic literature review research method. ARE practices were identified in empirical studies by searching articles for ``rapid release,'' ``continuous integration,'' ``continuous delivery,'' and ``continuous deployment.'' We systematically analyzed 619 articles and selected 71 primary studies for deeper investigation. The impacts of ARE practices were analyzed from three viewpoints: impacts associated with adoption of the practice, prevalence of the practice, and success of software development. Results The results indicated that ARE practices can create shorter lead times and better communication within and between development teams. However, challenges and drawbacks were also found in change management, software quality assurance, and stakeholder acceptance. The analysis revealed that 33 out of 71 primary studies were casual experience reports that had neither an explicit research method nor a data collection approach specified, and 23 out of 38 empirical studies applied qualitative methods, such as interviews, among practitioners. Additionally, 12 studies applied quantitative methods, such as mining of software repositories. Only three empirical studies combined these research approaches. Conclusion ARE practices can contribute to improved efficiency of the development process. Moreover, release stakeholders can develop a better understanding of the software project's status. Future empirical studies should consider the comprehensive reporting of the context and how the practice is implemented instead of merely referring to usage of the practice. In addition, different stakeholder points of view, such as customer perceptions regarding ARE practices, still clearly require further research.},
  doi       = {10.1016/j.infsof.2017.01.009},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  keywords  = {Agile,Continuous delivery,Continuous deployment,Continuous integration,Rapid release,Release engineering},
  language  = {en},
  timestamp = {2020-10-29T20:36:40Z},
}

@InProceedings{Kaur2019,
  author    = {Kaur, Arvinder and Vig, Vidhi},
  booktitle = {Computational {{Intelligence}} in {{Data Mining}}},
  title     = {On {{Understanding}} the {{Release Patterns}} of {{Open Source Java Projects}}},
  year      = {2019},
  address   = {{Singapore}},
  editor    = {Behera, Himansu Sekhar and Nayak, Janmenjoy and Naik, Bighnaraj and Abraham, Ajith},
  pages     = {9--18},
  publisher = {{Springer}},
  series    = {Advances in {{Intelligent Systems}} and {{Computing}}},
  abstract  = {Release length is of great significance to companies as well as to researchers as it provides a deeper insight into the rules and practices followed by the applications. It has been observed that many Open Source projects follow agile practices of parallel development and Rapid Releases (RR) but, very few studies till date, have analyzed release patterns of these Open Source projects. This paper analyzes ten Open Source Java projects (Apache Server Foundation) comprising 718 releases to study the evolution of release lengths. The results of the study show that: (1) eight out of ten datasets followed RR models. (2) None of these datasets followed RR models since their first release. (3) The average release length was found to be four months for major versions and one month for minor versions (exceptions removed). (4) There exists a negative correlation between number of contributors and release length.},
  doi       = {10.1007/978-981-10-8055-5_2},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  isbn      = {978-981-10-8055-5},
  keywords  = {Evolution,Frequent versions,Open Source,Release cycle,Repositories},
  language  = {en},
  timestamp = {2020-10-30T00:39:48Z},
}

@InProceedings{Khalil2019,
  author    = {Khalil, Z. Abou and Constantinou, E. and Mens, T. and Duchien, L. and Quinton, C.},
  booktitle = {2019 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  title     = {A {{Longitudinal Analysis}} of {{Bug Handling Across Eclipse Releases}}},
  year      = {2019},
  month     = sep,
  pages     = {1--12},
  abstract  = {Large open source software projects, like Eclipse, follow a continuous software development process, with a regular release cycle. During each release, new bugs are reported, triaged and resolved. Previous studies have focused on various aspects of bug fixing, such as bug triaging, bug prediction, and bug process analysis. Most studies, however, do not distinguish between what happens before and after each scheduled release. We are also unaware of studies that compare bug fixing activities across different project releases. This paper presents an empirical analysis of the bug handling process of Eclipse over a 15-year period, considering 138K bug reports from Bugzilla, including 16 annual Eclipse releases and two quarterly releases in 2018. We compare the bug resolution rate, the fixing rate, the bug triaging time and the fixing time before and after each release date, and we study the possible impact of "release pressure". Among others, our results reveal that Eclipse bug handling activity is improving over time, with an important decrease in the number of reported bugs before releases, an increase in the bug fixing rate and an increasingly balanced bug handling workload before and after releases. The recent transition from an annual to a quarterly release cycle continued to improve the bug handling process.},
  doi       = {10.1109/ICSME.2019.00010},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\S68UFEYT\\Khalil et al. - 2019 - A Longitudinal Analysis of Bug Handling Across Ecl.pdf:application/pdf},
  groups    = {forward_01, selected, p_Khomh2015_forward, p_Costa2018_forward},
  issn      = {2576-3148},
  keywords  = {16 annual Eclipse releases,bug fixing rate,bug prediction,bug process analysis,bug resolution rate,bug triaging time,Computer bugs,continuous software development process,Delays,different project releases,Eclipse bug handling activity,empirical analysis; bug fixing process; software maintenance; rapid release cycle; bug triaging; Bugzilla; Releases,History,increasingly balanced bug handling workload,Interviews,open source software projects,program debugging,public domain software,quarterly release cycle,quarterly releases,regular release cycle,release date,release pressure,reported bugs,scheduled release,Software,software fault tolerance,Switches},
  timestamp = {2020-10-29T19:51:19Z},
}

@InProceedings{Khalil2019a,
  author    = {Khalil, Z. Abou},
  booktitle = {2019 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  title     = {Studying the {{Impact}} of {{Policy Changes}} on {{Bug Handling Performance}}},
  year      = {2019},
  month     = sep,
  pages     = {590--594},
  abstract  = {The majority of the software development effort is spent on software maintenance. Bug handling constitutes one of the major software maintenance activities. Earlier studies have empirically investigated various aspects of bug handling, such as bug triaging, bug fixing, and bug process analysis. However, results from previous studies may not be applicable to contemporary agile software development practices.Moreover, these studies did not investigate how changes in the development policies and supporting tools impact the bug handling process. Therefore, our main goal is to investigate the impact of such changes on the bug handling process performance. To do so, we are conducting empirical studies on large and long-lived open source software projects. We report on our current research findings and outline the ongoing Ph.D. research project of the first author.},
  doi       = {10.1109/ICSME.2019.00093},
  groups    = {forward_01, selected, p_Khomh2015_forward, p_Costa2018_forward},
  issn      = {2576-3148},
  keywords  = {agile software development practices,bug fixing,bug handling process performance,bug tracker; empirical analysis; bug fixing process; software maintenance; rapid release cycle; bug triaging; Bugzilla,bug triaging,Computer bugs,Delays,development policies,open source software projects,policy changes,program debugging,project management,public domain software,Schedules,software development effort,software development management,software maintenance,Software maintenance,software maintenance activities,Tools},
  timestamp = {2020-10-29T19:54:15Z},
}

@InProceedings{Kula2019,
  author     = {Kula, Elvan and Rastogi, Ayushi and Huijgens, Hennie and van Deursen, Arie and Gousios, Georgios},
  booktitle  = {Proceedings of the 2019 27th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  title      = {Releasing Fast and Slow: An Exploratory Case Study at {{ING}}},
  year       = {2019},
  address    = {{New York, NY, USA}},
  month      = aug,
  pages      = {785--795},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{ESEC}}/{{FSE}} 2019},
  abstract   = {The appeal of delivering new features faster has led many software projects to adopt rapid releases. However, it is not well understood what the effects of this practice are. This paper presents an exploratory case study of rapid releases at ING, a large banking company that develops software solutions in-house, to characterize rapid releases. Since 2011, ING has shifted to a rapid release model. This switch has resulted in a mixed environment of 611 teams releasing relatively fast and slow. We followed a mixed-methods approach in which we conducted a survey with 461 participants and corroborated their perceptions with 2 years of code quality data and 1 year of release delay data. Our research shows that: rapid releases are more commonly delayed than their non-rapid counterparts, however, rapid releases have shorter delays; rapid releases can be beneficial in terms of reviewing and user-perceived quality; rapidly released software tends to have a higher code churn, a higher test coverage and a lower average complexity; challenges in rapid releases are related to managing dependencies and certain code aspects, e.g., design debt.},
  doi        = {10.1145/3338906.3338978},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\5D4URYJ2\\Kula et al. - 2019 - Releasing fast and slow an exploratory case study.pdf:application/pdf},
  groups     = {forward_01, selected, p_Khomh2015_forward},
  isbn       = {978-1-4503-5572-8},
  keywords   = {rapid release,release delay,software quality,technical debt},
  shorttitle = {Releasing Fast and Slow},
  timestamp  = {2020-10-29T21:10:20Z},
}

@Article{LUO2019,
  author     = {LUO, Dan and Fang, Yulin and Song, Peijian and Wang, Chong (Alex)},
  journal    = {ICIS 2019 Proceedings},
  title      = {The {{Impact}} of {{Digital Platform Rapid Release Strategy}} on {{App Update Behavior}}: {{An Empirical Study}} of {{Firefox}}},
  year       = {2019},
  month      = nov,
  groups     = {forward_01, selected, p_Khomh2015_forward, p_Costa2018_forward},
  shorttitle = {The {{Impact}} of {{Digital Platform Rapid Release Strategy}} on {{App Update Behavior}}},
  timestamp  = {2020-10-29T19:55:33Z},
}

@Article{Lin2017,
  author    = {Lin, Dayi and Bezemer, Cor-Paul and Hassan, Ahmed E.},
  journal   = {Empirical Software Engineering},
  title     = {Studying the Urgent Updates of Popular Games on the {{Steam}} Platform},
  year      = {2017},
  issn      = {1573-7616},
  month     = aug,
  number    = {4},
  pages     = {2095--2126},
  volume    = {22},
  abstract  = {The steadily increasing popularity of computer games has led to the rise of a multi-billion dollar industry. This increasing popularity is partly enabled by online digital distribution platforms for games, such as Steam. These platforms offer an insight into the development and test processes of game developers. In particular, we can extract the update cycle of a game and study what makes developers deviate from that cycle by releasing so-called urgent updates. An urgent update is a software update that fixes problems that are deemed critical enough to not be left unfixed until a regular-cycle update. Urgent updates are made in a state of emergency and outside the regular development and test timelines which causes unnecessary stress on the development team. Hence, avoiding the need for an urgent update is important for game developers. We define urgent updates as 0-day updates (updates that are released on the same day), updates that are released faster than the regular cycle, or self-admitted hotfixes. We conduct an empirical study of the urgent updates of the 50 most popular games from Steam, the dominant digital game delivery platform. As urgent updates are reflections of mistakes in the development and test processes, a better understanding of urgent updates can in turn stimulate the improvement of these processes, and eventually save resources for game developers. In this paper, we argue that the update strategy that is chosen by a game developer affects the number of urgent updates that are released. Although the choice of update strategy does not appear to have an impact on the percentage of updates that are released faster than the regular cycle or self-admitted hotfixes, games that use a frequent update strategy tend to have a higher proportion of 0-day updates than games that use a traditional update strategy.},
  doi       = {10.1007/s10664-016-9480-2},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  language  = {en},
  timestamp = {2020-10-29T20:38:00Z},
}

@PhdThesis{Lin2019,
  author     = {Lin, Dayi},
  title      = {How {{Can Game Developers Leverage Data}} from {{Online Distribution Platforms}}? {{A Case Study}} of the {{Steam Platform}}},
  year       = {2019},
  month      = jan,
  type       = {Thesis},
  abstract   = {Developing a successful game is challenging. Prior work shows that gamers are extremely difficult to satisfy, making the quality of games an important issue. Prior work has yielded important results from mining data that is available on the online distribution platforms for software applications, helping practitioners save valuable resources, and improving the user-perceived quality of software that is distributed through these platforms. However, much of the work on mining online distribution platforms focuses on mining mobile app stores (e.g., Google Play Store, Apple App Store). Video game development differs from the development of other types of software. Hence, knowledge derived from mining mobile app stores may not be directly applicable to game development.    In this Ph.D. thesis, we focused on mining online distribution platforms for games. In particular, we mined data from the Steam platform, the largest digital distribution platforms for PC gaming, with over 23,000 games available and over 184 million active users. More specifically, we analyzed the following four aspects of online distribution for games: urgent updates; the early access model (which enables game developers to sell unfinished versions of their games); user reviews; and user-recorded gameplay videos on the Steam platform. We observed that the choice of update strategy is associated with the proportion of urgent updates that developers have to release. Early access game developers can use the early access model as a method for eliciting early feedback and more positive reviews to attract additional new players. In addition, although negative reviews contain more valuable information for developers, the portion of useful information in positive reviews should not be ignored by developers and researchers. Finally, we proposed an approach for determining the likelihood that a gameplay video demonstrates a game bug, with both a mean average precision at 10 and a mean average precision at 100 of 0.91. Our approach can help game developers leverage readily available gameplay videos to automatically collect otherwise hard-to-gather bug reports for games. The results of our empirical studies highlight the value of mining online distribution platforms for games in offering practical suggestions for game developers.},
  annotation = {Accepted: 2019-01-17T18:33:21Z},
  copyright  = {Queen's University's Thesis/Dissertation Non-Exclusive License for Deposit to QSpace and Library and Archives Canada},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\D2522ERT\\Lin - 2019 - How Can Game Developers Leverage Data from Online .pdf:application/pdf},
  groups     = {forward_01, excluded_doubt, p_Khomh2015_forward},
  language   = {eng},
  shorttitle = {How {{Can Game Developers Leverage Data}} from {{Online Distribution Platforms}}?},
  timestamp  = {2020-10-29T21:20:41Z},
}

@PhdThesis{Poo-Caamano2016,
  author     = {{Poo-Caama{\~n}o}, Germ{\'a}n},
  title      = {Release Management in Free and Open Source Software Ecosystems},
  year       = {2016},
  type       = {Thesis},
  abstract   = {Releasing software is challenging. To decide when to release software, developers may  consider a deadline, a set of features or quality attributes. Yet, there are many stories of  software that is not released on time. In large-scale software development, release management  requires significant communication and coordination. It is particularly challenging  in Free and Open Source Software (FOSS) ecosystems, in which hundreds of loosely connected  developers and their projects are coordinated for releasing software according to a  schedule.  In this work, we investigate the release management process in two large-scale FOSS  development projects. In particular, our focus is the communication in the whole release  management process in each ecosystem across multiple releases. The main research questions  addressed in this dissertation are: (1) How do developers in these FOSS ecosystems  communicate and coordinate to build and release a common product based on different  projects? (2) What are the release management tasks in a FOSS ecosystem? and (3) What  are the challenges that release managers face in a FOSS ecosystem?  To understand this process and its challenges better, we used a multiple case study  methodology, and colleced evidence from a combination of the following sources: documents,  archival records, interviews, direct observation, participant observation, and physical  artifacts. We conducted the case studies on two FLOSS software ecosystems: GNOME  and OpenStack. We analyzed over two and half years of communication in each ecosystem  and studied developers' interactions. GNOME is a collection of libraries, system services,  and end-user applications; together, these projects provide a unified desktop \textemdash the GNOME  desktop. OpenStack is a collection of software tools for building and managing cloud computing  platforms for public and private clouds. We catalogued communication channels,  categorized coordination activities in one channel, and triangulated our results by  interviewing key developers identified through social network analysis.  We found factors that impact the release process in a software ecosystem, including a  release schedule positively, influence instead of direct control, and diversity. The release  schedule drives most of the communication within an ecosystem. To achieve a concerted release,  a Release Team helps developers reach technical consensus through influence rather  than direct control. The diverse composition of the Release Team might increase its reach  and influence in the ecosystem. Our results can help organizations build better large-scale  teams and show that software engineering research focused on individual projects might  miss important parts of the picture.  The contributions of this dissertation are: (1) an empirical study of release management  in two FOSS ecosystems (2) a set of lessons learned from the case studies, and (3) a theory  of release management in FOSS ecosystems. We summarize our theory that explains our  understanding of release management in FOSS ecosystems as three statements: (1) the size  and complexity of the integrated product is constrained by the release managers capacity,  (2) release management should be capable of reaching the whole ecosystem, and (3) the  release managers need social and technical skills. The dissertation discusses this theory in  the light of the case studies, other research efforts, and its implications.},
  annotation = {Accepted: 2016-12-02T18:19:44Z},
  copyright  = {Available to the World Wide Web},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\7XAPABBI\\Poo-Caamaño - 2016 - Release management in free and open source softwar.pdf:application/pdf},
  groups     = {forward_01, excluded_doubt, p_Khomh2015_forward},
  language   = {en},
  timestamp  = {2020-10-29T20:58:39Z},
}

@InProceedings{Rahman2015,
  author    = {Rahman, M. Tajmilur},
  booktitle = {2015 {{IEEE}} 22nd {{International Conference}} on {{Software Analysis}}, {{Evolution}}, and {{Reengineering}} ({{SANER}})},
  title     = {Investigating Modern Release Engineering Practices},
  year      = {2015},
  month     = mar,
  pages     = {607--608},
  abstract  = {In my PhD research I will focus on modern release engineering practices. First, I have quantified the time and effort that is involved in stabilizing a release. I found that despite using rapid release, the Chrome and Linux projects still have a period where they rush changes into a release. Second, developers typically isolate unrelated changes on branches. However, developers at major companies, such as Google and Facebook, commit all changes to a single branch. They isolate unrelated changes using feature-flags, which allows them to disable works in progress. My goal is to empirically determine the best practices when using flags and identify dead code. Finally, I will develop tool support to manage feature flags.},
  doi       = {10.1109/SANER.2015.7081893},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  issn      = {1534-5351},
  keywords  = {Best practices,Browsers,Chrome projects,Companies,Facebook,feature flags,Feature Flags,Google,Linux,Linux projects,modern release engineering practices,Release Engineering,Release Management,Rush to release,social networking (online),Software,Technical Debt},
  timestamp = {2020-10-30T00:41:28Z},
}

@InProceedings{Vassallo2018,
  author     = {Vassallo, Carmine and Palomba, Fabio and Bacchelli, Alberto and Gall, Harald C.},
  booktitle  = {Proceedings of the 33rd {{ACM}}/{{IEEE International Conference}} on {{Automated Software Engineering}}},
  title      = {Continuous Code Quality: Are We (Really) Doing That?},
  year       = {2018},
  address    = {{New York, NY, USA}},
  month      = sep,
  pages      = {790--795},
  publisher  = {{Association for Computing Machinery}},
  series     = {{{ASE}} 2018},
  abstract   = {Continuous Integration (CI) is a software engineering practice where developers constantly integrate their changes to a project through an automated build process. The goal of CI is to provide developers with prompt feedback on several quality dimensions after each change. Indeed, previous studies provided empirical evidence on a positive association between properly following CI principles and source code quality. A core principle behind CI is Continuous Code Quality (also known as CCQ, which includes automated testing and automated code inspection) may appear simple and effective, yet we know little about its practical adoption. In this paper, we propose a preliminary empirical investigation aimed at understanding how rigorously practitioners follow CCQ. Our study reveals a strong dichotomy between theory and practice: developers do not perform continuous inspection but rather control for quality only at the end of a sprint and most of the times only on the release branch. Preprint [https://doi.org/10.5281/zenodo.1341036]. Data and Materials [http://doi.org/10.5281/zenodo.1341015].},
  doi        = {10.1145/3238147.3240729},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\5QL57AU4\\Vassallo et al. - 2018 - Continuous code quality are we (really) doing tha.pdf:application/pdf},
  groups     = {forward_01, excluded_abstract, p_Khomh2015_forward},
  isbn       = {978-1-4503-5937-5},
  keywords   = {Code Quality,Continuous Integration,Empirical Studies},
  shorttitle = {Continuous Code Quality},
  timestamp  = {2020-10-29T20:46:23Z},
}

@InProceedings{Vassallo2019,
  author    = {Vassallo, C.},
  booktitle = {2019 34th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  title     = {Enabling {{Continuous Improvement}} of a {{Continuous Integration Process}}},
  year      = {2019},
  month     = nov,
  pages     = {1246--1249},
  abstract  = {Continuous Integration (CI) is a widely-adopted software engineering practice. Despite its undisputed benefits, like higher software quality and improved developer productivity, mastering CI is not easy. Among the several barriers when transitioning to CI, developers need to face a new type of software failures (i.e., build failures) that requires them to understand complex build logs. Even when a team has successfully introduced a CI culture, living up to its principles and improving the CI practice are also challenging. In my research, I want to provide developers with the right support for establishing CI and the proper recommendations for continuously improving their CI process.},
  doi       = {10.1109/ASE.2019.00151},
  file      = {IEEE Xplore Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\2FPNW5PH\\Vassallo - 2019 - Enabling Continuous Improvement of a Continuous In.pdf:application/pdf},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
  issn      = {2643-1572},
  keywords  = {Best practices,build failures,CI culture,CI practice,CI process,complex build logs,continuous improvement,continuous integration process,Continuous Integration; Build Failures; Anti patterns; Best Practices,developer productivity,Measurement,Organizations,Software,software engineering practice,software failures,software quality,Taxonomy,Testing,Tools,undisputed benefits},
  timestamp = {2020-10-29T21:22:42Z},
}

@Article{Vig2018,
  author    = {Vig, Vidhi and Kaur, Arvinder},
  journal   = {Journal of Intelligent \& Fuzzy Systems},
  title     = {Test Effort Estimation and Prediction of Traditional and Rapid Release Models Using Machine Learning Algorithms},
  year      = {2018},
  issn      = {1064-1246},
  month     = jan,
  number    = {2},
  pages     = {1657--1669},
  volume    = {35},
  abstract  = {Recently, many software companies have shifted to shorter release cycles from the traditional multi-month release cycle. Evolution and transition of release cycles may affect the test effort in the system. This paper analyses 25 traditional releases},
  doi       = {10.3233/JIFS-169703},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  language  = {en},
  publisher = {{IOS Press}},
  timestamp = {2020-10-29T21:04:40Z},
}

@Article{Yamashita2016,
  author     = {Yamashita, Kazuhiro and Kamei, Yasutaka and McIntosh, Shane and Hassan, Ahmed E. and Ubayashi, Naoyasu},
  journal    = {Journal of Information Processing},
  title      = {Magnet or {{Sticky}}? {{Measuring Project Characteristics}} from the {{Perspective}} of {{Developer Attraction}} and {{Retention}}},
  year       = {2016},
  number     = {2},
  pages      = {339--348},
  volume     = {24},
  abstract   = {Open Source Software (OSS) is vital to both end users and enterprises. As OSS systems are becoming a type of infrastructure, long-term OSS projects are desired. For the survival of OSS projects, the projects need to not only retain existing developers, but also attract new developers to grow. To better understand how projects retain and attract contributors, our preliminary study aimed to measure the personnel attraction and retention of OSS projects using a pair of population migration metrics, called Magnet (personnel attraction) and Sticky (retention) metrics. Because the preliminary study analyzed only 90 projects and the 90 projects are not representative of GitHub, this paper extend the preliminary study to better understand the generalizability of the results by analyzing 16, 552 projects of GitHub. Furthermore, we also add a pilot study to investigate the typical duration between releases to find more appropriate release duration. The study results show that (1) approximately 23\% of developers remain in the same projects that the developers contribute to, (2) the larger projects are likely to attract and retain more developers, (3) 53\% of terminal projects eventually decay to a state of fewer than ten developers and (4) 55\% of attractive projects remain in an attractive category.},
  doi        = {10.2197/ipsjjip.24.339},
  file       = {Full Text PDF:C\:\\Users\\felipecrp\\Zotero\\storage\\QJK2ZQFE\\Yamashita et al. - 2016 - Magnet or Sticky Measuring Project Characteristic.pdf:application/pdf},
  groups     = {forward_01, excluded_abstract, p_Khomh2015_forward},
  keywords   = {Developer Transition,Magnet,Mining Software Repositories,Open Source Software,Sticky},
  shorttitle = {Magnet or {{Sticky}}?},
  timestamp  = {2020-10-29T20:44:34Z},
}

@Article{abdellatif2020msrbot,
  author    = {Abdellatif, Ahmad and Badran, Khaled and Shihab, Emad},
  journal   = {Empirical Software Engineering},
  title     = {MSRBot: Using bots to answer questions from software repositories},
  year      = {2020},
  pages     = {1--30},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
  publisher = {Springer},
}

@InProceedings{an2015empirical,
  author       = {An, Le and Khomh, Foutse},
  booktitle    = {2015 IEEE International Conference on Software Quality, Reliability and Security},
  title        = {An Empirical Study of Highly Impactful Bugs in Mozilla Projects},
  year         = {2015},
  organization = {IEEE},
  pages        = {262--271},
  groups       = {forward_01, excluded_abstract, p_Khomh2015_forward},
}

@MastersThesis{an2015improving,
  author    = {An, Le},
  title     = {Improving Bug Triaging Using Software Analytics},
  year      = {2015},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
  publisher = {Diss},
}

@Article{chennappan2017autocorrelation,
  author = {Chennappan, R. and Vidyaa Thulasiraman},
  title  = AUTOCORRELATION #{WEIGHTEDSUMENTROPYBASEDSOFTWAREQUALITYMANAGEMENTFOROPENSOURCEAPPLICATION, journal = International Journal of Advanced Research in Computer Science 8},
  year   = {2017},
  volume = {8},
  groups = {forward_01, excluded_title, p_Khomh2015_forward},
}

@Book{frank2017,
  author = {Frank, Ferdinand},
  title  = {Activity of Core and Peripheral Developers: A Case Study on Mozilla Firefox},
  year   = {2017},
  groups = {forward_01, excluded_doubt, p_Khomh2015_forward},
}

@Article{hassan2017empirical,
  author    = {Hassan, Safwat and Shang, Weiyi and Hassan, Ahmed E},
  journal   = {Empirical Software Engineering},
  title     = {An empirical study of emergency updates for top android mobile apps},
  year      = {2017},
  number    = {1},
  pages     = {505--546},
  volume    = {22},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
  publisher = {Springer},
}

@Book{hassan2018studying,
  author    = {Hassan, Safwat Mohamed Ibrahim},
  publisher = {Diss},
  title     = {Studying User-Developer Interactions Through the Updating and Reviewing Mechanisms of the Google Play Store},
  year      = {2018},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
}

@InProceedings{kamei2016defect,
  author       = {Kamei, Yasutaka and Shihab, Emad},
  booktitle    = {2016 IEEE 23rd international conference on software analysis, evolution, and reengineering (SANER)},
  title        = {Defect prediction: Accomplishments and future challenges},
  year         = {2016},
  organization = {IEEE},
  pages        = {33--45},
  volume       = {5},
  groups       = {forward_01, excluded_abstract, p_Khomh2015_forward},
}

@InProceedings{laghari2016fine,
  author    = {Laghari, Gulsher and Murgia, Alessandro and Demeyer, Serge},
  booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
  title     = {Fine-tuning spectrum based fault localisation with frequent method item sets},
  year      = {2016},
  pages     = {274--285},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
}

@Book{laghari2018optimising,
  author    = {Laghari, Gulsher},
  publisher = {Diss},
  title     = {Optimising and Assessing the Effectiveness of Spectrum Based Fault Localisation},
  year      = {2018},
  groups    = {forward_01, excluded_title, p_Khomh2015_forward},
}

@Article{landman2016empirical,
  author    = {Landman, Davy and Serebrenik, Alexander and Bouwers, Eric and Vinju, Jurgen J},
  journal   = {Journal of Software: Evolution and Process},
  title     = {Empirical analysis of the relationship between CC and SLOC in a large corpus of Java methods and C functions},
  year      = {2016},
  number    = {7},
  pages     = {589--618},
  volume    = {28},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
  publisher = {Wiley Online Library},
}

@Article{link2018assessing,
  author = {Link, Georg JP and Germonprez, Matt},
  title  = {Assessing open source project health},
  year   = {2018},
  groups = {forward_01, excluded_abstract, p_Khomh2015_forward},
}

@InProceedings{rahman2018impact,
  author    = {Rahman, Md Tajmilur and Rigby, Peter C},
  booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  title     = {The impact of failing, flaky, and high failure tests on the number of crash reports associated with Firefox builds},
  year      = {2018},
  pages     = {857--862},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
}

@InProceedings{ruohonen2016software,
  author       = {Ruohonen, Jukka and Hyrynsalmi, Sami and Lepp{\"a}nen, Ville},
  booktitle    = {International Conference on Advanced Information Systems Engineering},
  title        = {Software Vulnerability Life Cycles and the Age of Software Products: An Empirical Assertion with Operating System Products},
  year         = {2016},
  organization = {Springer},
  pages        = {207--218},
  groups       = {forward_01, excluded_abstract, p_Khomh2015_forward},
}

@Article{soetens2017changes,
  author    = {Soetens, Quinten David and Robbes, Romain and Demeyer, Serge},
  journal   = {ACM Computing Surveys (CSUR)},
  title     = {Changes as first-class citizens: A research perspective on modern software tooling},
  year      = {2017},
  number    = {2},
  pages     = {1--38},
  volume    = {50},
  groups    = {forward_01, excluded_abstract, p_Khomh2015_forward},
  publisher = {ACM New York, NY, USA},
}

@InProceedings{teixeira2017release,
  author       = {Teixeira, Jose},
  booktitle    = {IFIP International Conference on Open Source Systems},
  title        = {Release early, release often and release on time. an empirical case study of release management},
  year         = {2017},
  organization = {Springer, Cham},
  pages        = {167--181},
  groups       = {forward_01, selected, p_Khomh2015_forward},
}

@Article{teixeira2019managing,
  author    = {Teixeira, Jos{\'e} Apolin{\'a}rio and Karsten, Helena},
  journal   = {Journal of Internet Services and Applications},
  title     = {Managing to release early, often and on time in the OpenStack software ecosystem},
  year      = {2019},
  number    = {1},
  pages     = {7},
  volume    = {10},
  groups    = {forward_01, selected, p_Khomh2015_forward},
  publisher = {Springer},
}

@Book{weberbenefits,
  author = {Weber, Michael},
  title  = {The {Benefits} of {Continuous} {Deployment} evaluated using the {JDownloader} {Software}},
  groups = {forward_01, excluded_abstract, p_Khomh2015_forward},
}
